
exercise6_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004310  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004420  08004420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c8  080044c8  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  080044c8  080044c8  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c8  080044c8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080044d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da0  20000060  08004530  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  08004530  00006e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012679  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0c  00000000  00000000  00018702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001b310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdd  00000000  00000000  0001c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002796  00000000  00000000  0001d095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130ef  00000000  00000000  0001f82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912f6  00000000  00000000  0003291a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000481c  00000000  00000000  000c3c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c8470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004408 	.word	0x08004408

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004408 	.word	0x08004408

08000150 <AccessSharedData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AccessSharedData(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    // Disable interrupts
    portENTER_CRITICAL();
 8000154:	f003 fd92 	bl	8003c7c <vPortEnterCritical>

    // Simulate shared resource access
    osDelay(500); // Simulate access delay
 8000158:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800015c:	f001 fc44 	bl	80019e8 <osDelay>

    // Enable interrupts
    portEXIT_CRITICAL();
 8000160:	f003 fdbc 	bl	8003cdc <vPortExitCritical>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016c:	f000 f9fe 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000170:	f000 f824 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000174:	f000 f868 	bl	8000248 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000178:	f001 fb26 	bl	80017c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GreenFlashTask */
  GreenFlashTaskHandle = osThreadNew(StartGreenFlashingTask, NULL, &GreenFlashTask_attributes);
 800017c:	4a09      	ldr	r2, [pc, #36]	@ (80001a4 <main+0x3c>)
 800017e:	2100      	movs	r1, #0
 8000180:	4809      	ldr	r0, [pc, #36]	@ (80001a8 <main+0x40>)
 8000182:	f001 fb87 	bl	8001894 <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a08      	ldr	r2, [pc, #32]	@ (80001ac <main+0x44>)
 800018a:	6013      	str	r3, [r2, #0]

  /* creation of RedFlashTask */
  RedFlashTaskHandle = osThreadNew(StartRedFlashingTask, NULL, &RedFlashTask_attributes);
 800018c:	4a08      	ldr	r2, [pc, #32]	@ (80001b0 <main+0x48>)
 800018e:	2100      	movs	r1, #0
 8000190:	4808      	ldr	r0, [pc, #32]	@ (80001b4 <main+0x4c>)
 8000192:	f001 fb7f 	bl	8001894 <osThreadNew>
 8000196:	4603      	mov	r3, r0
 8000198:	4a07      	ldr	r2, [pc, #28]	@ (80001b8 <main+0x50>)
 800019a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800019c:	f001 fb46 	bl	800182c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a0:	bf00      	nop
 80001a2:	e7fd      	b.n	80001a0 <main+0x38>
 80001a4:	08004468 	.word	0x08004468
 80001a8:	080002c9 	.word	0x080002c9
 80001ac:	2000007c 	.word	0x2000007c
 80001b0:	0800448c 	.word	0x0800448c
 80001b4:	080002fd 	.word	0x080002fd
 80001b8:	20000080 	.word	0x20000080

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	@ 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f004 f836 	bl	800423c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001de:	2301      	movs	r3, #1
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f0:	2302      	movs	r3, #2
 80001f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fc5f 	bl	8000ac8 <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000210:	f000 f8a0 	bl	8000354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fecc 	bl	8000fcc <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023a:	f000 f88b 	bl	8000354 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	@ 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800025c:	4b18      	ldr	r3, [pc, #96]	@ (80002c0 <MX_GPIO_Init+0x78>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <MX_GPIO_Init+0x78>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b15      	ldr	r3, [pc, #84]	@ (80002c0 <MX_GPIO_Init+0x78>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0320 	and.w	r3, r3, #32
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000274:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <MX_GPIO_Init+0x78>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a11      	ldr	r2, [pc, #68]	@ (80002c0 <MX_GPIO_Init+0x78>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <MX_GPIO_Init+0x78>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0304 	and.w	r3, r3, #4
 8000288:	603b      	str	r3, [r7, #0]
 800028a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000292:	480c      	ldr	r0, [pc, #48]	@ (80002c4 <MX_GPIO_Init+0x7c>)
 8000294:	f000 fc00 	bl	8000a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_LED_Pin GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|GREEN_LED_Pin|RED_LED_Pin;
 8000298:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800029c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029e:	2301      	movs	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	2302      	movs	r3, #2
 80002a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4619      	mov	r1, r3
 80002b0:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <MX_GPIO_Init+0x7c>)
 80002b2:	f000 fa6d 	bl	8000790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800

080002c8 <StartGreenFlashingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGreenFlashingTask */
void StartGreenFlashingTask(void *argument)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // Turn Green LED on
	  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002d6:	4808      	ldr	r0, [pc, #32]	@ (80002f8 <StartGreenFlashingTask+0x30>)
 80002d8:	f000 fbde 	bl	8000a98 <HAL_GPIO_WritePin>

	  // Access the shared data
	  AccessSharedData();
 80002dc:	f7ff ff38 	bl	8000150 <AccessSharedData>

	  // Turn Green LED off
	  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e6:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <StartGreenFlashingTask+0x30>)
 80002e8:	f000 fbd6 	bl	8000a98 <HAL_GPIO_WritePin>

	  osDelay(500);
 80002ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002f0:	f001 fb7a 	bl	80019e8 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin, GPIO_PIN_SET);
 80002f4:	bf00      	nop
 80002f6:	e7eb      	b.n	80002d0 <StartGreenFlashingTask+0x8>
 80002f8:	40010800 	.word	0x40010800

080002fc <StartRedFlashingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedFlashingTask */
void StartRedFlashingTask(void *argument)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedFlashingTask */
  /* Infinite loop */
  for(;;)
  {
	  // Turn Red LED on
	  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800030a:	4808      	ldr	r0, [pc, #32]	@ (800032c <StartRedFlashingTask+0x30>)
 800030c:	f000 fbc4 	bl	8000a98 <HAL_GPIO_WritePin>

	  // Access the shared data
	  AccessSharedData();
 8000310:	f7ff ff1e 	bl	8000150 <AccessSharedData>

	  // Turn Red LED off
	  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800031a:	4804      	ldr	r0, [pc, #16]	@ (800032c <StartRedFlashingTask+0x30>)
 800031c:	f000 fbbc 	bl	8000a98 <HAL_GPIO_WritePin>

	  osDelay(100);
 8000320:	2064      	movs	r0, #100	@ 0x64
 8000322:	f001 fb61 	bl	80019e8 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin, GPIO_PIN_SET);
 8000326:	bf00      	nop
 8000328:	e7ec      	b.n	8000304 <StartRedFlashingTask+0x8>
 800032a:	bf00      	nop
 800032c:	40010800 	.word	0x40010800

08000330 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d101      	bne.n	8000346 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000342:	f000 f929 	bl	8000598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40000800 	.word	0x40000800

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
}
 800035a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <Error_Handler+0x8>

08000360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <HAL_MspInit+0x68>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a17      	ldr	r2, [pc, #92]	@ (80003c8 <HAL_MspInit+0x68>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <HAL_MspInit+0x68>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <HAL_MspInit+0x68>)
 8000380:	69db      	ldr	r3, [r3, #28]
 8000382:	4a11      	ldr	r2, [pc, #68]	@ (80003c8 <HAL_MspInit+0x68>)
 8000384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000388:	61d3      	str	r3, [r2, #28]
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <HAL_MspInit+0x68>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	210f      	movs	r1, #15
 800039a:	f06f 0001 	mvn.w	r0, #1
 800039e:	f000 f9cc 	bl	800073a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a2:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <HAL_MspInit+0x6c>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <HAL_MspInit+0x6c>)
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010000 	.word	0x40010000

080003d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08e      	sub	sp, #56	@ 0x38
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003d8:	2300      	movs	r3, #0
 80003da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003dc:	2300      	movs	r3, #0
 80003de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003e0:	2300      	movs	r3, #0
 80003e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80003e6:	4b34      	ldr	r3, [pc, #208]	@ (80004b8 <HAL_InitTick+0xe8>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a33      	ldr	r2, [pc, #204]	@ (80004b8 <HAL_InitTick+0xe8>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b31      	ldr	r3, [pc, #196]	@ (80004b8 <HAL_InitTick+0xe8>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 0304 	and.w	r3, r3, #4
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003fe:	f107 0210 	add.w	r2, r7, #16
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f000 ff45 	bl	8001298 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800040e:	6a3b      	ldr	r3, [r7, #32]
 8000410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000414:	2b00      	cmp	r3, #0
 8000416:	d103      	bne.n	8000420 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000418:	f000 ff2a 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 800041c:	6378      	str	r0, [r7, #52]	@ 0x34
 800041e:	e004      	b.n	800042a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000420:	f000 ff26 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 8000424:	4603      	mov	r3, r0
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800042a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800042c:	4a23      	ldr	r2, [pc, #140]	@ (80004bc <HAL_InitTick+0xec>)
 800042e:	fba2 2303 	umull	r2, r3, r2, r3
 8000432:	0c9b      	lsrs	r3, r3, #18
 8000434:	3b01      	subs	r3, #1
 8000436:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000438:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <HAL_InitTick+0xf0>)
 800043a:	4a22      	ldr	r2, [pc, #136]	@ (80004c4 <HAL_InitTick+0xf4>)
 800043c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800043e:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <HAL_InitTick+0xf0>)
 8000440:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000444:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000446:	4a1e      	ldr	r2, [pc, #120]	@ (80004c0 <HAL_InitTick+0xf0>)
 8000448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800044a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800044c:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <HAL_InitTick+0xf0>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000452:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <HAL_InitTick+0xf0>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <HAL_InitTick+0xf0>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800045e:	4818      	ldr	r0, [pc, #96]	@ (80004c0 <HAL_InitTick+0xf0>)
 8000460:	f000 ff68 	bl	8001334 <HAL_TIM_Base_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800046a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800046e:	2b00      	cmp	r3, #0
 8000470:	d11b      	bne.n	80004aa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000472:	4813      	ldr	r0, [pc, #76]	@ (80004c0 <HAL_InitTick+0xf0>)
 8000474:	f000 ffb6 	bl	80013e4 <HAL_TIM_Base_Start_IT>
 8000478:	4603      	mov	r3, r0
 800047a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800047e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000482:	2b00      	cmp	r3, #0
 8000484:	d111      	bne.n	80004aa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000486:	201e      	movs	r0, #30
 8000488:	f000 f973 	bl	8000772 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b0f      	cmp	r3, #15
 8000490:	d808      	bhi.n	80004a4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000492:	2200      	movs	r2, #0
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	201e      	movs	r0, #30
 8000498:	f000 f94f 	bl	800073a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800049c:	4a0a      	ldr	r2, [pc, #40]	@ (80004c8 <HAL_InitTick+0xf8>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	e002      	b.n	80004aa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80004a4:	2301      	movs	r3, #1
 80004a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3738      	adds	r7, #56	@ 0x38
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	431bde83 	.word	0x431bde83
 80004c0:	20000084 	.word	0x20000084
 80004c4:	40000800 	.word	0x40000800
 80004c8:	20000004 	.word	0x20000004

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <NMI_Handler+0x4>

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <MemManage_Handler+0x4>

080004e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000504:	4802      	ldr	r0, [pc, #8]	@ (8000510 <TIM4_IRQHandler+0x10>)
 8000506:	f000 ffbf 	bl	8001488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000084 	.word	0x20000084

08000514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000520:	f7ff fff8 	bl	8000514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480b      	ldr	r0, [pc, #44]	@ (8000554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000526:	490c      	ldr	r1, [pc, #48]	@ (8000558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000528:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <LoopFillZerobss+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800053c:	4c09      	ldr	r4, [pc, #36]	@ (8000564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054a:	f003 fed5 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fe0b 	bl	8000168 <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800055c:	080044d0 	.word	0x080044d0
  ldr r2, =_sbss
 8000560:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000564:	20001e00 	.word	0x20001e00

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f8d1 	bl	8000724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ff24 	bl	80003d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff feea 	bl	8000360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <HAL_IncTick+0x1c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <HAL_IncTick+0x20>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a03      	ldr	r2, [pc, #12]	@ (80005b8 <HAL_IncTick+0x20>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000008 	.word	0x20000008
 80005b8:	200000cc 	.word	0x200000cc

080005bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;
 80005c0:	4b02      	ldr	r3, [pc, #8]	@ (80005cc <HAL_GetTick+0x10>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	200000cc 	.word	0x200000cc

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4906      	ldr	r1, [pc, #24]	@ (8000668 <__NVIC_EnableIRQ+0x34>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	@ (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	@ 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	@ 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff4f 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800074c:	f7ff ff64 	bl	8000618 <__NVIC_GetPriorityGrouping>
 8000750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	6978      	ldr	r0, [r7, #20]
 8000758:	f7ff ffb2 	bl	80006c0 <NVIC_EncodePriority>
 800075c:	4602      	mov	r2, r0
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff81 	bl	800066c <__NVIC_SetPriority>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff57 	bl	8000634 <__NVIC_EnableIRQ>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000790:	b480      	push	{r7}
 8000792:	b08b      	sub	sp, #44	@ 0x2c
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a2:	e169      	b.n	8000a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007a4:	2201      	movs	r2, #1
 80007a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69fa      	ldr	r2, [r7, #28]
 80007b4:	4013      	ands	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	429a      	cmp	r2, r3
 80007be:	f040 8158 	bne.w	8000a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	4a9a      	ldr	r2, [pc, #616]	@ (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d05e      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007cc:	4a98      	ldr	r2, [pc, #608]	@ (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d875      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007d2:	4a98      	ldr	r2, [pc, #608]	@ (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d058      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007d8:	4a96      	ldr	r2, [pc, #600]	@ (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d86f      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007de:	4a96      	ldr	r2, [pc, #600]	@ (8000a38 <HAL_GPIO_Init+0x2a8>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d052      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007e4:	4a94      	ldr	r2, [pc, #592]	@ (8000a38 <HAL_GPIO_Init+0x2a8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d869      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007ea:	4a94      	ldr	r2, [pc, #592]	@ (8000a3c <HAL_GPIO_Init+0x2ac>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d04c      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007f0:	4a92      	ldr	r2, [pc, #584]	@ (8000a3c <HAL_GPIO_Init+0x2ac>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d863      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007f6:	4a92      	ldr	r2, [pc, #584]	@ (8000a40 <HAL_GPIO_Init+0x2b0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d046      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007fc:	4a90      	ldr	r2, [pc, #576]	@ (8000a40 <HAL_GPIO_Init+0x2b0>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d85d      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 8000802:	2b12      	cmp	r3, #18
 8000804:	d82a      	bhi.n	800085c <HAL_GPIO_Init+0xcc>
 8000806:	2b12      	cmp	r3, #18
 8000808:	d859      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 800080a:	a201      	add	r2, pc, #4	@ (adr r2, 8000810 <HAL_GPIO_Init+0x80>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	0800088b 	.word	0x0800088b
 8000814:	08000865 	.word	0x08000865
 8000818:	08000877 	.word	0x08000877
 800081c:	080008b9 	.word	0x080008b9
 8000820:	080008bf 	.word	0x080008bf
 8000824:	080008bf 	.word	0x080008bf
 8000828:	080008bf 	.word	0x080008bf
 800082c:	080008bf 	.word	0x080008bf
 8000830:	080008bf 	.word	0x080008bf
 8000834:	080008bf 	.word	0x080008bf
 8000838:	080008bf 	.word	0x080008bf
 800083c:	080008bf 	.word	0x080008bf
 8000840:	080008bf 	.word	0x080008bf
 8000844:	080008bf 	.word	0x080008bf
 8000848:	080008bf 	.word	0x080008bf
 800084c:	080008bf 	.word	0x080008bf
 8000850:	080008bf 	.word	0x080008bf
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000881 	.word	0x08000881
 800085c:	4a79      	ldr	r2, [pc, #484]	@ (8000a44 <HAL_GPIO_Init+0x2b4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d013      	beq.n	800088a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000862:	e02c      	b.n	80008be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	623b      	str	r3, [r7, #32]
          break;
 800086a:	e029      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	3304      	adds	r3, #4
 8000872:	623b      	str	r3, [r7, #32]
          break;
 8000874:	e024      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	3308      	adds	r3, #8
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e01f      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	330c      	adds	r3, #12
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e01a      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000892:	2304      	movs	r3, #4
 8000894:	623b      	str	r3, [r7, #32]
          break;
 8000896:	e013      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d105      	bne.n	80008ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a0:	2308      	movs	r3, #8
 80008a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	611a      	str	r2, [r3, #16]
          break;
 80008aa:	e009      	b.n	80008c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008ac:	2308      	movs	r3, #8
 80008ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69fa      	ldr	r2, [r7, #28]
 80008b4:	615a      	str	r2, [r3, #20]
          break;
 80008b6:	e003      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
          break;
 80008bc:	e000      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          break;
 80008be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2bff      	cmp	r3, #255	@ 0xff
 80008c4:	d801      	bhi.n	80008ca <HAL_GPIO_Init+0x13a>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	e001      	b.n	80008ce <HAL_GPIO_Init+0x13e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3304      	adds	r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2bff      	cmp	r3, #255	@ 0xff
 80008d4:	d802      	bhi.n	80008dc <HAL_GPIO_Init+0x14c>
 80008d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	e002      	b.n	80008e2 <HAL_GPIO_Init+0x152>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008de:	3b08      	subs	r3, #8
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	210f      	movs	r1, #15
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	401a      	ands	r2, r3
 80008f4:	6a39      	ldr	r1, [r7, #32]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 80b1 	beq.w	8000a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000910:	4b4d      	ldr	r3, [pc, #308]	@ (8000a48 <HAL_GPIO_Init+0x2b8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a4c      	ldr	r2, [pc, #304]	@ (8000a48 <HAL_GPIO_Init+0x2b8>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a48 <HAL_GPIO_Init+0x2b8>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000928:	4a48      	ldr	r2, [pc, #288]	@ (8000a4c <HAL_GPIO_Init+0x2bc>)
 800092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	3302      	adds	r3, #2
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a40      	ldr	r2, [pc, #256]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d013      	beq.n	800097c <HAL_GPIO_Init+0x1ec>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3f      	ldr	r2, [pc, #252]	@ (8000a54 <HAL_GPIO_Init+0x2c4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d00d      	beq.n	8000978 <HAL_GPIO_Init+0x1e8>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a58 <HAL_GPIO_Init+0x2c8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d007      	beq.n	8000974 <HAL_GPIO_Init+0x1e4>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a3d      	ldr	r2, [pc, #244]	@ (8000a5c <HAL_GPIO_Init+0x2cc>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d101      	bne.n	8000970 <HAL_GPIO_Init+0x1e0>
 800096c:	2303      	movs	r3, #3
 800096e:	e006      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000970:	2304      	movs	r3, #4
 8000972:	e004      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000974:	2302      	movs	r3, #2
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 800097c:	2300      	movs	r3, #0
 800097e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000980:	f002 0203 	and.w	r2, r2, #3
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	4093      	lsls	r3, r2
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800098e:	492f      	ldr	r1, [pc, #188]	@ (8000a4c <HAL_GPIO_Init+0x2bc>)
 8000990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	492c      	ldr	r1, [pc, #176]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	600b      	str	r3, [r1, #0]
 80009b4:	e006      	b.n	80009c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	43db      	mvns	r3, r3
 80009be:	4928      	ldr	r1, [pc, #160]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	4922      	ldr	r1, [pc, #136]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	604b      	str	r3, [r1, #4]
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	491e      	ldr	r1, [pc, #120]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	4918      	ldr	r1, [pc, #96]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	608b      	str	r3, [r1, #8]
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4914      	ldr	r1, [pc, #80]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d021      	beq.n	8000a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	490e      	ldr	r1, [pc, #56]	@ (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60cb      	str	r3, [r1, #12]
 8000a2c:	e021      	b.n	8000a72 <HAL_GPIO_Init+0x2e2>
 8000a2e:	bf00      	nop
 8000a30:	10320000 	.word	0x10320000
 8000a34:	10310000 	.word	0x10310000
 8000a38:	10220000 	.word	0x10220000
 8000a3c:	10210000 	.word	0x10210000
 8000a40:	10120000 	.word	0x10120000
 8000a44:	10110000 	.word	0x10110000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_GPIO_Init+0x304>)
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	4909      	ldr	r1, [pc, #36]	@ (8000a94 <HAL_GPIO_Init+0x304>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	3301      	adds	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f47f ae8e 	bne.w	80007a4 <HAL_GPIO_Init+0x14>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	372c      	adds	r7, #44	@ 0x2c
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40010400 	.word	0x40010400

08000a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aa8:	787b      	ldrb	r3, [r7, #1]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ab4:	e003      	b.n	8000abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	041a      	lsls	r2, r3, #16
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	611a      	str	r2, [r3, #16]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e272      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8087 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae8:	4b92      	ldr	r3, [pc, #584]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d00c      	beq.n	8000b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000af4:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 030c 	and.w	r3, r3, #12
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d112      	bne.n	8000b26 <HAL_RCC_OscConfig+0x5e>
 8000b00:	4b8c      	ldr	r3, [pc, #560]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b0c:	d10b      	bne.n	8000b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0e:	4b89      	ldr	r3, [pc, #548]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d06c      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x12c>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d168      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e24c      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b2e:	d106      	bne.n	8000b3e <HAL_RCC_OscConfig+0x76>
 8000b30:	4b80      	ldr	r3, [pc, #512]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a7f      	ldr	r2, [pc, #508]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e02e      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10c      	bne.n	8000b60 <HAL_RCC_OscConfig+0x98>
 8000b46:	4b7b      	ldr	r3, [pc, #492]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a7a      	ldr	r2, [pc, #488]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b78      	ldr	r3, [pc, #480]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a77      	ldr	r2, [pc, #476]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e01d      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b68:	d10c      	bne.n	8000b84 <HAL_RCC_OscConfig+0xbc>
 8000b6a:	4b72      	ldr	r3, [pc, #456]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a71      	ldr	r2, [pc, #452]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b6f      	ldr	r3, [pc, #444]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e00b      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b84:	4b6b      	ldr	r3, [pc, #428]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a6a      	ldr	r2, [pc, #424]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b68      	ldr	r3, [pc, #416]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a67      	ldr	r2, [pc, #412]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d013      	beq.n	8000bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fd0a 	bl	80005bc <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fd06 	bl	80005bc <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	@ 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e200      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f0      	beq.n	8000bac <HAL_RCC_OscConfig+0xe4>
 8000bca:	e014      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fcf6 	bl	80005bc <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fcf2 	bl	80005bc <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	@ 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e1ec      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be6:	4b53      	ldr	r3, [pc, #332]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f0      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x10c>
 8000bf2:	e000      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d063      	beq.n	8000cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c02:	4b4c      	ldr	r3, [pc, #304]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00b      	beq.n	8000c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c0e:	4b49      	ldr	r3, [pc, #292]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d11c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x18c>
 8000c1a:	4b46      	ldr	r3, [pc, #280]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d116      	bne.n	8000c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c26:	4b43      	ldr	r3, [pc, #268]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d005      	beq.n	8000c3e <HAL_RCC_OscConfig+0x176>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e1c0      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4939      	ldr	r1, [pc, #228]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c52:	e03a      	b.n	8000cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d020      	beq.n	8000c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c5c:	4b36      	ldr	r3, [pc, #216]	@ (8000d38 <HAL_RCC_OscConfig+0x270>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c62:	f7ff fcab 	bl	80005bc <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fca7 	bl	80005bc <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e1a1      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f0      	beq.n	8000c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c88:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4927      	ldr	r1, [pc, #156]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
 8000c9c:	e015      	b.n	8000cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c9e:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc8a 	bl	80005bc <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cac:	f7ff fc86 	bl	80005bc <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e180      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d03a      	beq.n	8000d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d019      	beq.n	8000d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <HAL_RCC_OscConfig+0x274>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce4:	f7ff fc6a 	bl	80005bc <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cec:	f7ff fc66 	bl	80005bc <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e160      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 faf4 	bl	80012f8 <RCC_Delay>
 8000d10:	e01c      	b.n	8000d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_RCC_OscConfig+0x274>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d18:	f7ff fc50 	bl	80005bc <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1e:	e00f      	b.n	8000d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d20:	f7ff fc4c 	bl	80005bc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d908      	bls.n	8000d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e146      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	42420000 	.word	0x42420000
 8000d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d40:	4b92      	ldr	r3, [pc, #584]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1e9      	bne.n	8000d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a6 	beq.w	8000ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10d      	bne.n	8000d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b88      	ldr	r3, [pc, #544]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a87      	ldr	r2, [pc, #540]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b85      	ldr	r3, [pc, #532]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d82:	2301      	movs	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d86:	4b82      	ldr	r3, [pc, #520]	@ (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d118      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d92:	4b7f      	ldr	r3, [pc, #508]	@ (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7e      	ldr	r2, [pc, #504]	@ (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc0d 	bl	80005bc <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da6:	f7ff fc09 	bl	80005bc <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b64      	cmp	r3, #100	@ 0x64
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e103      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db8:	4b75      	ldr	r3, [pc, #468]	@ (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f0      	beq.n	8000da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d106      	bne.n	8000dda <HAL_RCC_OscConfig+0x312>
 8000dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4a6e      	ldr	r2, [pc, #440]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6213      	str	r3, [r2, #32]
 8000dd8:	e02d      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x334>
 8000de2:	4b6a      	ldr	r3, [pc, #424]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a69      	ldr	r2, [pc, #420]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6213      	str	r3, [r2, #32]
 8000dee:	4b67      	ldr	r3, [pc, #412]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a66      	ldr	r2, [pc, #408]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	f023 0304 	bic.w	r3, r3, #4
 8000df8:	6213      	str	r3, [r2, #32]
 8000dfa:	e01c      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d10c      	bne.n	8000e1e <HAL_RCC_OscConfig+0x356>
 8000e04:	4b61      	ldr	r3, [pc, #388]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a60      	ldr	r2, [pc, #384]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6213      	str	r3, [r2, #32]
 8000e10:	4b5e      	ldr	r3, [pc, #376]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4a5d      	ldr	r2, [pc, #372]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6213      	str	r3, [r2, #32]
 8000e1c:	e00b      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a5a      	ldr	r2, [pc, #360]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	6213      	str	r3, [r2, #32]
 8000e2a:	4b58      	ldr	r3, [pc, #352]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a57      	ldr	r2, [pc, #348]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f023 0304 	bic.w	r3, r3, #4
 8000e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d015      	beq.n	8000e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fbbd 	bl	80005bc <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f7ff fbb9 	bl	80005bc <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e0b1      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0ee      	beq.n	8000e46 <HAL_RCC_OscConfig+0x37e>
 8000e68:	e014      	b.n	8000e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fba7 	bl	80005bc <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e70:	e00a      	b.n	8000e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e72:	f7ff fba3 	bl	80005bc <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e09b      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e88:	4b40      	ldr	r3, [pc, #256]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1ee      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d105      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8087 	beq.w	8000fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eb0:	4b36      	ldr	r3, [pc, #216]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d061      	beq.n	8000f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d146      	bne.n	8000f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec4:	4b33      	ldr	r3, [pc, #204]	@ (8000f94 <HAL_RCC_OscConfig+0x4cc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fb77 	bl	80005bc <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ed2:	f7ff fb73 	bl	80005bc <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e06d      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee4:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f0      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef8:	d108      	bne.n	8000f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000efa:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	4921      	ldr	r1, [pc, #132]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a19      	ldr	r1, [r3, #32]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	491b      	ldr	r1, [pc, #108]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <HAL_RCC_OscConfig+0x4cc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fb47 	bl	80005bc <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f32:	f7ff fb43 	bl	80005bc <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e03d      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x46a>
 8000f50:	e035      	b.n	8000fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_RCC_OscConfig+0x4cc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb30 	bl	80005bc <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fb2c 	bl	80005bc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e026      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x498>
 8000f7e:	e01e      	b.n	8000fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d107      	bne.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e019      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40007000 	.word	0x40007000
 8000f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <HAL_RCC_OscConfig+0x500>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d001      	beq.n	8000fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0d0      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d910      	bls.n	8001010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fee:	4b67      	ldr	r3, [pc, #412]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 0207 	bic.w	r2, r3, #7
 8000ff6:	4965      	ldr	r1, [pc, #404]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ffe:	4b63      	ldr	r3, [pc, #396]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d001      	beq.n	8001010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0b8      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001028:	4b59      	ldr	r3, [pc, #356]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a58      	ldr	r2, [pc, #352]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001040:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a52      	ldr	r2, [pc, #328]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800104a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800104c:	4b50      	ldr	r3, [pc, #320]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	494d      	ldr	r1, [pc, #308]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d040      	beq.n	80010ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d107      	bne.n	8001082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	4b47      	ldr	r3, [pc, #284]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d115      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e07f      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d107      	bne.n	800109a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108a:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e073      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109a:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e06b      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f023 0203 	bic.w	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4936      	ldr	r1, [pc, #216]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010bc:	f7ff fa7e 	bl	80005bc <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c2:	e00a      	b.n	80010da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c4:	f7ff fa7a 	bl	80005bc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e053      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010da:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 020c 	and.w	r2, r3, #12
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d1eb      	bne.n	80010c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d210      	bcs.n	800111c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b24      	ldr	r3, [pc, #144]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4922      	ldr	r1, [pc, #136]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b20      	ldr	r3, [pc, #128]	@ (800118c <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e032      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d008      	beq.n	800113a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4916      	ldr	r1, [pc, #88]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	4313      	orrs	r3, r2
 8001138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d009      	beq.n	800115a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	490e      	ldr	r1, [pc, #56]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800115a:	f000 f821 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 800115e:	4602      	mov	r2, r0
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	490a      	ldr	r1, [pc, #40]	@ (8001194 <HAL_RCC_ClockConfig+0x1c8>)
 800116c:	5ccb      	ldrb	r3, [r1, r3]
 800116e:	fa22 f303 	lsr.w	r3, r2, r3
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <HAL_RCC_ClockConfig+0x1cc>)
 8001174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <HAL_RCC_ClockConfig+0x1d0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f928 	bl	80003d0 <HAL_InitTick>

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000
 8001190:	40021000 	.word	0x40021000
 8001194:	080044b0 	.word	0x080044b0
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a0:	b490      	push	{r4, r7}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011a6:	4b29      	ldr	r3, [pc, #164]	@ (800124c <HAL_RCC_GetSysClockFreq+0xac>)
 80011a8:	1d3c      	adds	r4, r7, #4
 80011aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011b0:	f240 2301 	movw	r3, #513	@ 0x201
 80011b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d002      	beq.n	80011e0 <HAL_RCC_GetSysClockFreq+0x40>
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d003      	beq.n	80011e6 <HAL_RCC_GetSysClockFreq+0x46>
 80011de:	e02b      	b.n	8001238 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011e2:	623b      	str	r3, [r7, #32]
      break;
 80011e4:	e02b      	b.n	800123e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	0c9b      	lsrs	r3, r3, #18
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3328      	adds	r3, #40	@ 0x28
 80011f0:	443b      	add	r3, r7
 80011f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d012      	beq.n	8001228 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	0c5b      	lsrs	r3, r3, #17
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	3328      	adds	r3, #40	@ 0x28
 800120e:	443b      	add	r3, r7
 8001210:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001214:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_RCC_GetSysClockFreq+0xb4>)
 800121a:	fb03 f202 	mul.w	r2, r3, r2
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
 8001226:	e004      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	623b      	str	r3, [r7, #32]
      break;
 8001236:	e002      	b.n	800123e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_RCC_GetSysClockFreq+0xb4>)
 800123a:	623b      	str	r3, [r7, #32]
      break;
 800123c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800123e:	6a3b      	ldr	r3, [r7, #32]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3728      	adds	r7, #40	@ 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bc90      	pop	{r4, r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	08004440 	.word	0x08004440
 8001250:	40021000 	.word	0x40021000
 8001254:	007a1200 	.word	0x007a1200
 8001258:	003d0900 	.word	0x003d0900

0800125c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001260:	4b02      	ldr	r3, [pc, #8]	@ (800126c <HAL_RCC_GetHCLKFreq+0x10>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	20000000 	.word	0x20000000

08001270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001274:	f7ff fff2 	bl	800125c <HAL_RCC_GetHCLKFreq>
 8001278:	4602      	mov	r2, r0
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	4903      	ldr	r1, [pc, #12]	@ (8001294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	080044c0 	.word	0x080044c0

08001298 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	220f      	movs	r2, #15
 80012a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_RCC_GetClockConfig+0x58>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_RCC_GetClockConfig+0x58>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_RCC_GetClockConfig+0x58>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_RCC_GetClockConfig+0x58>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_RCC_GetClockConfig+0x5c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0207 	and.w	r2, r3, #7
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40022000 	.word	0x40022000

080012f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <RCC_Delay+0x34>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <RCC_Delay+0x38>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001314:	bf00      	nop
  }
  while (Delay --);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	60fa      	str	r2, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f9      	bne.n	8001314 <RCC_Delay+0x1c>
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000000 	.word	0x20000000
 8001330:	10624dd3 	.word	0x10624dd3

08001334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e041      	b.n	80013ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f839 	bl	80013d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f000 f9b4 	bl	80016e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d001      	beq.n	80013fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e03a      	b.n	8001472 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a18      	ldr	r2, [pc, #96]	@ (800147c <HAL_TIM_Base_Start_IT+0x98>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00e      	beq.n	800143c <HAL_TIM_Base_Start_IT+0x58>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001426:	d009      	beq.n	800143c <HAL_TIM_Base_Start_IT+0x58>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <HAL_TIM_Base_Start_IT+0x9c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d004      	beq.n	800143c <HAL_TIM_Base_Start_IT+0x58>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <HAL_TIM_Base_Start_IT+0xa0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d111      	bne.n	8001460 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b06      	cmp	r3, #6
 800144c:	d010      	beq.n	8001470 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800145e:	e007      	b.n	8001470 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40012c00 	.word	0x40012c00
 8001480:	40000400 	.word	0x40000400
 8001484:	40000800 	.word	0x40000800

08001488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b02      	cmp	r3, #2
 800149c:	d122      	bne.n	80014e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d11b      	bne.n	80014e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f06f 0202 	mvn.w	r2, #2
 80014b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f8ed 	bl	80016aa <HAL_TIM_IC_CaptureCallback>
 80014d0:	e005      	b.n	80014de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f8e0 	bl	8001698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f8ef 	bl	80016bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d122      	bne.n	8001538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d11b      	bne.n	8001538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f06f 0204 	mvn.w	r2, #4
 8001508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2202      	movs	r2, #2
 800150e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f8c3 	bl	80016aa <HAL_TIM_IC_CaptureCallback>
 8001524:	e005      	b.n	8001532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f8b6 	bl	8001698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f8c5 	bl	80016bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b08      	cmp	r3, #8
 8001544:	d122      	bne.n	800158c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b08      	cmp	r3, #8
 8001552:	d11b      	bne.n	800158c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0208 	mvn.w	r2, #8
 800155c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2204      	movs	r2, #4
 8001562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f899 	bl	80016aa <HAL_TIM_IC_CaptureCallback>
 8001578:	e005      	b.n	8001586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f88c 	bl	8001698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f89b 	bl	80016bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b10      	cmp	r3, #16
 8001598:	d122      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d11b      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0210 	mvn.w	r2, #16
 80015b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2208      	movs	r2, #8
 80015b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f86f 	bl	80016aa <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f862 	bl	8001698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f871 	bl	80016bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10e      	bne.n	800160c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0201 	mvn.w	r2, #1
 8001604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7fe fe92 	bl	8000330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001616:	2b80      	cmp	r3, #128	@ 0x80
 8001618:	d10e      	bne.n	8001638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001624:	2b80      	cmp	r3, #128	@ 0x80
 8001626:	d107      	bne.n	8001638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8bf 	bl	80017b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001642:	2b40      	cmp	r3, #64	@ 0x40
 8001644:	d10e      	bne.n	8001664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001650:	2b40      	cmp	r3, #64	@ 0x40
 8001652:	d107      	bne.n	8001664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800165c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f835 	bl	80016ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b20      	cmp	r3, #32
 8001670:	d10e      	bne.n	8001690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b20      	cmp	r3, #32
 800167e:	d107      	bne.n	8001690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0220 	mvn.w	r2, #32
 8001688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f88a 	bl	80017a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <TIM_Base_SetConfig+0xb8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00b      	beq.n	8001710 <TIM_Base_SetConfig+0x30>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016fe:	d007      	beq.n	8001710 <TIM_Base_SetConfig+0x30>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a26      	ldr	r2, [pc, #152]	@ (800179c <TIM_Base_SetConfig+0xbc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d003      	beq.n	8001710 <TIM_Base_SetConfig+0x30>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <TIM_Base_SetConfig+0xc0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d108      	bne.n	8001722 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <TIM_Base_SetConfig+0xb8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00b      	beq.n	8001742 <TIM_Base_SetConfig+0x62>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001730:	d007      	beq.n	8001742 <TIM_Base_SetConfig+0x62>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <TIM_Base_SetConfig+0xbc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d003      	beq.n	8001742 <TIM_Base_SetConfig+0x62>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a18      	ldr	r2, [pc, #96]	@ (80017a0 <TIM_Base_SetConfig+0xc0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d108      	bne.n	8001754 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <TIM_Base_SetConfig+0xb8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d103      	bne.n	8001788 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	615a      	str	r2, [r3, #20]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40012c00 	.word	0x40012c00
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800

080017a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017ce:	f3ef 8305 	mrs	r3, IPSR
 80017d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80017d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8310 	mrs	r3, PRIMASK
 80017de:	607b      	str	r3, [r7, #4]
  return(result);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <osKernelInitialize+0x32>
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <osKernelInitialize+0x60>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d109      	bne.n	8001802 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017ee:	f3ef 8311 	mrs	r3, BASEPRI
 80017f2:	603b      	str	r3, [r7, #0]
  return(result);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80017fa:	f06f 0305 	mvn.w	r3, #5
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e00c      	b.n	800181c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <osKernelInitialize+0x60>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <osKernelInitialize+0x60>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e002      	b.n	800181c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800181c:	68fb      	ldr	r3, [r7, #12]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	200000d0 	.word	0x200000d0

0800182c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001832:	f3ef 8305 	mrs	r3, IPSR
 8001836:	60bb      	str	r3, [r7, #8]
  return(result);
 8001838:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10f      	bne.n	800185e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800183e:	f3ef 8310 	mrs	r3, PRIMASK
 8001842:	607b      	str	r3, [r7, #4]
  return(result);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <osKernelStart+0x32>
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <osKernelStart+0x64>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d109      	bne.n	8001866 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001852:	f3ef 8311 	mrs	r3, BASEPRI
 8001856:	603b      	str	r3, [r7, #0]
  return(result);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <osKernelStart+0x3a>
    stat = osErrorISR;
 800185e:	f06f 0305 	mvn.w	r3, #5
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e00e      	b.n	8001884 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <osKernelStart+0x64>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <osKernelStart+0x64>)
 8001870:	2202      	movs	r2, #2
 8001872:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001874:	f001 f8a8 	bl	80029c8 <vTaskStartScheduler>
      stat = osOK;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e002      	b.n	8001884 <osKernelStart+0x58>
    } else {
      stat = osError;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000d0 	.word	0x200000d0

08001894 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b092      	sub	sp, #72	@ 0x48
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018a4:	f3ef 8305 	mrs	r3, IPSR
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 8094 	bne.w	80019da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018b2:	f3ef 8310 	mrs	r3, PRIMASK
 80018b6:	623b      	str	r3, [r7, #32]
  return(result);
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 808d 	bne.w	80019da <osThreadNew+0x146>
 80018c0:	4b48      	ldr	r3, [pc, #288]	@ (80019e4 <osThreadNew+0x150>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d106      	bne.n	80018d6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018c8:	f3ef 8311 	mrs	r3, BASEPRI
 80018cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 8082 	bne.w	80019da <osThreadNew+0x146>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d07e      	beq.n	80019da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80018e0:	2318      	movs	r3, #24
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80018e4:	2300      	movs	r3, #0
 80018e6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80018e8:	f107 031b 	add.w	r3, r7, #27
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d045      	beq.n	8001986 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <osThreadNew+0x74>
        name = attr->name;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <osThreadNew+0x9a>
 800191c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191e:	2b38      	cmp	r3, #56	@ 0x38
 8001920:	d805      	bhi.n	800192e <osThreadNew+0x9a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <osThreadNew+0x9e>
        return (NULL);
 800192e:	2300      	movs	r3, #0
 8001930:	e054      	b.n	80019dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00e      	beq.n	8001968 <osThreadNew+0xd4>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2ba7      	cmp	r3, #167	@ 0xa7
 8001950:	d90a      	bls.n	8001968 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <osThreadNew+0xd4>
        mem = 1;
 8001962:	2301      	movs	r3, #1
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001966:	e010      	b.n	800198a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10c      	bne.n	800198a <osThreadNew+0xf6>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d108      	bne.n	800198a <osThreadNew+0xf6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d104      	bne.n	800198a <osThreadNew+0xf6>
          mem = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001984:	e001      	b.n	800198a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800198a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198c:	2b01      	cmp	r3, #1
 800198e:	d110      	bne.n	80019b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fe24 	bl	80025f4 <xTaskCreateStatic>
 80019ac:	4603      	mov	r3, r0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e013      	b.n	80019da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80019b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d110      	bne.n	80019da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80019b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fe71 	bl	80026b2 <xTaskCreate>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <osThreadNew+0x146>
          hTask = NULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80019da:	697b      	ldr	r3, [r7, #20]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3738      	adds	r7, #56	@ 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200000d0 	.word	0x200000d0

080019e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019f0:	f3ef 8305 	mrs	r3, IPSR
 80019f4:	613b      	str	r3, [r7, #16]
  return(result);
 80019f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10f      	bne.n	8001a1c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <osDelay+0x34>
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <osDelay+0x58>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d109      	bne.n	8001a24 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a10:	f3ef 8311 	mrs	r3, BASEPRI
 8001a14:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <osDelay+0x3c>
    stat = osErrorISR;
 8001a1c:	f06f 0305 	mvn.w	r3, #5
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e007      	b.n	8001a34 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 ff94 	bl	800295c <vTaskDelay>
    }
  }

  return (stat);
 8001a34:	697b      	ldr	r3, [r7, #20]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000d0 	.word	0x200000d0

08001a44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4a06      	ldr	r2, [pc, #24]	@ (8001a6c <vApplicationGetIdleTaskMemory+0x28>)
 8001a54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	200000d4 	.word	0x200000d4
 8001a70:	2000017c 	.word	0x2000017c

08001a74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a07      	ldr	r2, [pc, #28]	@ (8001aa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <vApplicationGetTimerTaskMemory+0x30>)
 8001a8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	2000037c 	.word	0x2000037c
 8001aa4:	20000424 	.word	0x20000424

08001aa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 0208 	add.w	r2, r3, #8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f103 0208 	add.w	r2, r3, #8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f103 0208 	add.w	r2, r3, #8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5a:	d103      	bne.n	8001b64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	e00c      	b.n	8001b7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3308      	adds	r3, #8
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e002      	b.n	8001b72 <vListInsert+0x2e>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d2f6      	bcs.n	8001b6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6892      	ldr	r2, [r2, #8]
 8001bca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6852      	ldr	r2, [r2, #4]
 8001bd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d103      	bne.n	8001be8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	1e5a      	subs	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10b      	bne.n	8001c34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c20:	f383 8811 	msr	BASEPRI, r3
 8001c24:	f3bf 8f6f 	isb	sy
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001c34:	f002 f822 	bl	8003c7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	441a      	add	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c64:	3b01      	subs	r3, #1
 8001c66:	68f9      	ldr	r1, [r7, #12]
 8001c68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	441a      	add	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	22ff      	movs	r2, #255	@ 0xff
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	22ff      	movs	r2, #255	@ 0xff
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d114      	bne.n	8001cb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01a      	beq.n	8001cc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3310      	adds	r3, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 f936 	bl	8002f08 <xTaskRemoveFromEventList>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <xQueueGenericReset+0xd0>)
 8001ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f3bf 8f4f 	dsb	sy
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	e009      	b.n	8001cc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3310      	adds	r3, #16
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fef5 	bl	8001aa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3324      	adds	r3, #36	@ 0x24
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fef0 	bl	8001aa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cc8:	f002 f808 	bl	8003cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000ed04 	.word	0xe000ed04

08001cdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	@ 0x38
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10b      	bne.n	8001d08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf4:	f383 8811 	msr	BASEPRI, r3
 8001cf8:	f3bf 8f6f 	isb	sy
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10b      	bne.n	8001d26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d12:	f383 8811 	msr	BASEPRI, r3
 8001d16:	f3bf 8f6f 	isb	sy
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	e7fd      	b.n	8001d22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <xQueueGenericCreateStatic+0x56>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <xQueueGenericCreateStatic+0x5a>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <xQueueGenericCreateStatic+0x5c>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10b      	bne.n	8001d54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	623b      	str	r3, [r7, #32]
}
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <xQueueGenericCreateStatic+0x84>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <xQueueGenericCreateStatic+0x88>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <xQueueGenericCreateStatic+0x8a>
 8001d64:	2300      	movs	r3, #0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	61fb      	str	r3, [r7, #28]
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d82:	2350      	movs	r3, #80	@ 0x50
 8001d84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b50      	cmp	r3, #80	@ 0x50
 8001d8a:	d00b      	beq.n	8001da4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	61bb      	str	r3, [r7, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001db6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f805 	bl	8001dd4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3730      	adds	r7, #48	@ 0x30
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e002      	b.n	8001df6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e02:	2101      	movs	r1, #1
 8001e04:	69b8      	ldr	r0, [r7, #24]
 8001e06:	f7ff feff 	bl	8001c08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	@ 0x38
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <xQueueGenericSend+0x34>
	__asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <xQueueGenericSend+0x42>
 8001e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <xQueueGenericSend+0x46>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <xQueueGenericSend+0x48>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10b      	bne.n	8001e80 <xQueueGenericSend+0x64>
	__asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d103      	bne.n	8001e8e <xQueueGenericSend+0x72>
 8001e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <xQueueGenericSend+0x76>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <xQueueGenericSend+0x78>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10b      	bne.n	8001eb0 <xQueueGenericSend+0x94>
	__asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	623b      	str	r3, [r7, #32]
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eb0:	f001 f9f4 	bl	800329c <xTaskGetSchedulerState>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <xQueueGenericSend+0xa4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <xQueueGenericSend+0xa8>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <xQueueGenericSend+0xaa>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10b      	bne.n	8001ee2 <xQueueGenericSend+0xc6>
	__asm volatile
 8001eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ece:	f383 8811 	msr	BASEPRI, r3
 8001ed2:	f3bf 8f6f 	isb	sy
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	61fb      	str	r3, [r7, #28]
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	e7fd      	b.n	8001ede <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ee2:	f001 fecb 	bl	8003c7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d302      	bcc.n	8001ef8 <xQueueGenericSend+0xdc>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d129      	bne.n	8001f4c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001efe:	f000 fa0d 	bl	800231c <prvCopyDataToQueue>
 8001f02:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d010      	beq.n	8001f2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0e:	3324      	adds	r3, #36	@ 0x24
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fff9 	bl	8002f08 <xTaskRemoveFromEventList>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <xQueueGenericSend+0x200>)
 8001f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	e00a      	b.n	8001f44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f34:	4b39      	ldr	r3, [pc, #228]	@ (800201c <xQueueGenericSend+0x200>)
 8001f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f44:	f001 feca 	bl	8003cdc <vPortExitCritical>
				return pdPASS;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e063      	b.n	8002014 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f52:	f001 fec3 	bl	8003cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e05c      	b.n	8002014 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 f833 	bl	8002fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f6e:	f001 feb5 	bl	8003cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f72:	f000 fd99 	bl	8002aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f76:	f001 fe81 	bl	8003c7c <vPortEnterCritical>
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d103      	bne.n	8001f90 <xQueueGenericSend+0x174>
 8001f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d103      	bne.n	8001fa6 <xQueueGenericSend+0x18a>
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fa6:	f001 fe99 	bl	8003cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001faa:	1d3a      	adds	r2, r7, #4
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 f822 	bl	8002ffc <xTaskCheckForTimeOut>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d124      	bne.n	8002008 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fc0:	f000 faa4 	bl	800250c <prvIsQueueFull>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d018      	beq.n	8001ffc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fcc:	3310      	adds	r3, #16
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 ff46 	bl	8002e64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fda:	f000 fa2f 	bl	800243c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001fde:	f000 fd71 	bl	8002ac4 <xTaskResumeAll>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f af7c 	bne.w	8001ee2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <xQueueGenericSend+0x200>)
 8001fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	e772      	b.n	8001ee2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ffe:	f000 fa1d 	bl	800243c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002002:	f000 fd5f 	bl	8002ac4 <xTaskResumeAll>
 8002006:	e76c      	b.n	8001ee2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800200a:	f000 fa17 	bl	800243c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800200e:	f000 fd59 	bl	8002ac4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002012:	2300      	movs	r3, #0
		}
	}
}
 8002014:	4618      	mov	r0, r3
 8002016:	3738      	adds	r7, #56	@ 0x38
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	e000ed04 	.word	0xe000ed04

08002020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	@ 0x38
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10b      	bne.n	8002050 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <xQueueGenericSendFromISR+0x3e>
 8002056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <xQueueGenericSendFromISR+0x42>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <xQueueGenericSendFromISR+0x44>
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206c:	f383 8811 	msr	BASEPRI, r3
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	f3bf 8f4f 	dsb	sy
 8002078:	623b      	str	r3, [r7, #32]
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d103      	bne.n	800208e <xQueueGenericSendFromISR+0x6e>
 8002086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <xQueueGenericSendFromISR+0x72>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <xQueueGenericSendFromISR+0x74>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	61fb      	str	r3, [r7, #28]
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020b0:	f001 fea6 	bl	8003e00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020b4:	f3ef 8211 	mrs	r2, BASEPRI
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	61ba      	str	r2, [r7, #24]
 80020ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <xQueueGenericSendFromISR+0xc2>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d12c      	bne.n	800213c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020f2:	f000 f913 	bl	800231c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80020f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fe:	d112      	bne.n	8002126 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d016      	beq.n	8002136 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210a:	3324      	adds	r3, #36	@ 0x24
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fefb 	bl	8002f08 <xTaskRemoveFromEventList>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002126:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800212a:	3301      	adds	r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	b25a      	sxtb	r2, r3
 8002130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002136:	2301      	movs	r3, #1
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800213a:	e001      	b.n	8002140 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800213c:	2300      	movs	r3, #0
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002142:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800214a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800214c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800214e:	4618      	mov	r0, r3
 8002150:	3738      	adds	r7, #56	@ 0x38
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	@ 0x30
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <xQueueReceive+0x32>
	__asm volatile
 8002172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	623b      	str	r3, [r7, #32]
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	e7fd      	b.n	8002186 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d103      	bne.n	8002198 <xQueueReceive+0x40>
 8002190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <xQueueReceive+0x44>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <xQueueReceive+0x46>
 800219c:	2300      	movs	r3, #0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10b      	bne.n	80021ba <xQueueReceive+0x62>
	__asm volatile
 80021a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	61fb      	str	r3, [r7, #28]
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	e7fd      	b.n	80021b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ba:	f001 f86f 	bl	800329c <xTaskGetSchedulerState>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <xQueueReceive+0x72>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <xQueueReceive+0x76>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <xQueueReceive+0x78>
 80021ce:	2300      	movs	r3, #0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <xQueueReceive+0x94>
	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	61bb      	str	r3, [r7, #24]
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80021ec:	f001 fd46 	bl	8003c7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01f      	beq.n	800223c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002200:	f000 f8f6 	bl	80023f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00f      	beq.n	8002234 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	3310      	adds	r3, #16
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fe75 	bl	8002f08 <xTaskRemoveFromEventList>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002224:	4b3c      	ldr	r3, [pc, #240]	@ (8002318 <xQueueReceive+0x1c0>)
 8002226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002234:	f001 fd52 	bl	8003cdc <vPortExitCritical>
				return pdPASS;
 8002238:	2301      	movs	r3, #1
 800223a:	e069      	b.n	8002310 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002242:	f001 fd4b 	bl	8003cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002246:	2300      	movs	r3, #0
 8002248:	e062      	b.n	8002310 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800224a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4618      	mov	r0, r3
 8002256:	f000 febb 	bl	8002fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800225a:	2301      	movs	r3, #1
 800225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800225e:	f001 fd3d 	bl	8003cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002262:	f000 fc21 	bl	8002aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002266:	f001 fd09 	bl	8003c7c <vPortEnterCritical>
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002270:	b25b      	sxtb	r3, r3
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002276:	d103      	bne.n	8002280 <xQueueReceive+0x128>
 8002278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002286:	b25b      	sxtb	r3, r3
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d103      	bne.n	8002296 <xQueueReceive+0x13e>
 800228e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002296:	f001 fd21 	bl	8003cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800229a:	1d3a      	adds	r2, r7, #4
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 feaa 	bl	8002ffc <xTaskCheckForTimeOut>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d123      	bne.n	80022f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022b0:	f000 f916 	bl	80024e0 <prvIsQueueEmpty>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d017      	beq.n	80022ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022bc:	3324      	adds	r3, #36	@ 0x24
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fdce 	bl	8002e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80022c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022ca:	f000 f8b7 	bl	800243c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80022ce:	f000 fbf9 	bl	8002ac4 <xTaskResumeAll>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d189      	bne.n	80021ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <xQueueReceive+0x1c0>)
 80022da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	e780      	b.n	80021ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80022ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022ec:	f000 f8a6 	bl	800243c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022f0:	f000 fbe8 	bl	8002ac4 <xTaskResumeAll>
 80022f4:	e77a      	b.n	80021ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80022f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022f8:	f000 f8a0 	bl	800243c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022fc:	f000 fbe2 	bl	8002ac4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002302:	f000 f8ed 	bl	80024e0 <prvIsQueueEmpty>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	f43f af6f 	beq.w	80021ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800230e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002310:	4618      	mov	r0, r3
 8002312:	3730      	adds	r7, #48	@ 0x30
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	e000ed04 	.word	0xe000ed04

0800231c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002330:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d14d      	bne.n	80023de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 ffc6 	bl	80032d8 <xTaskPriorityDisinherit>
 800234c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	e043      	b.n	80023de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d119      	bne.n	8002390 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6898      	ldr	r0, [r3, #8]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	461a      	mov	r2, r3
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	f001 ffec 	bl	8004344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d32b      	bcc.n	80023de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	e026      	b.n	80023de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68d8      	ldr	r0, [r3, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	461a      	mov	r2, r3
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	f001 ffd2 	bl	8004344 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	425b      	negs	r3, r3
 80023aa:	441a      	add	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	425b      	negs	r3, r3
 80023c6:	441a      	add	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d105      	bne.n	80023de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3b01      	subs	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80023e6:	697b      	ldr	r3, [r7, #20]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d018      	beq.n	8002434 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	441a      	add	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	d303      	bcc.n	8002424 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68d9      	ldr	r1, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	461a      	mov	r2, r3
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f001 ff88 	bl	8004344 <memcpy>
	}
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002444:	f001 fc1a 	bl	8003c7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800244e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002450:	e011      	b.n	8002476 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d012      	beq.n	8002480 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3324      	adds	r3, #36	@ 0x24
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fd52 	bl	8002f08 <xTaskRemoveFromEventList>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800246a:	f000 fe2b 	bl	80030c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3b01      	subs	r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	dce9      	bgt.n	8002452 <prvUnlockQueue+0x16>
 800247e:	e000      	b.n	8002482 <prvUnlockQueue+0x46>
					break;
 8002480:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	22ff      	movs	r2, #255	@ 0xff
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800248a:	f001 fc27 	bl	8003cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800248e:	f001 fbf5 	bl	8003c7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002498:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800249a:	e011      	b.n	80024c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3310      	adds	r3, #16
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fd2d 	bl	8002f08 <xTaskRemoveFromEventList>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80024b4:	f000 fe06 	bl	80030c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	dce9      	bgt.n	800249c <prvUnlockQueue+0x60>
 80024c8:	e000      	b.n	80024cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80024ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	22ff      	movs	r2, #255	@ 0xff
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80024d4:	f001 fc02 	bl	8003cdc <vPortExitCritical>
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024e8:	f001 fbc8 	bl	8003c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e001      	b.n	80024fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024fe:	f001 fbed 	bl	8003cdc <vPortExitCritical>

	return xReturn;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002514:	f001 fbb2 	bl	8003c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	429a      	cmp	r2, r3
 8002522:	d102      	bne.n	800252a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e001      	b.n	800252e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800252e:	f001 fbd5 	bl	8003cdc <vPortExitCritical>

	return xReturn;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e014      	b.n	8002576 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800254c:	4a0e      	ldr	r2, [pc, #56]	@ (8002588 <vQueueAddToRegistry+0x4c>)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002558:	490b      	ldr	r1, [pc, #44]	@ (8002588 <vQueueAddToRegistry+0x4c>)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002562:	4a09      	ldr	r2, [pc, #36]	@ (8002588 <vQueueAddToRegistry+0x4c>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800256e:	e006      	b.n	800257e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b07      	cmp	r3, #7
 800257a:	d9e7      	bls.n	800254c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000824 	.word	0x20000824

0800258c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800259c:	f001 fb6e 	bl	8003c7c <vPortEnterCritical>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025a6:	b25b      	sxtb	r3, r3
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d103      	bne.n	80025b6 <vQueueWaitForMessageRestricted+0x2a>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c2:	d103      	bne.n	80025cc <vQueueWaitForMessageRestricted+0x40>
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025cc:	f001 fb86 	bl	8003cdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3324      	adds	r3, #36	@ 0x24
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fc65 	bl	8002eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7ff ff28 	bl	800243c <prvUnlockQueue>
	}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	@ 0x38
 80025f8:	af04      	add	r7, sp, #16
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	623b      	str	r3, [r7, #32]
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	61fb      	str	r3, [r7, #28]
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800263e:	23a8      	movs	r3, #168	@ 0xa8
 8002640:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2ba8      	cmp	r3, #168	@ 0xa8
 8002646:	d00b      	beq.n	8002660 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	61bb      	str	r3, [r7, #24]
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01e      	beq.n	80026a4 <xTaskCreateStatic+0xb0>
 8002666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002674:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	2202      	movs	r2, #2
 800267a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800267e:	2300      	movs	r3, #0
 8002680:	9303      	str	r3, [sp, #12]
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f850 	bl	800273c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800269c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800269e:	f000 f8ed 	bl	800287c <prvAddNewTaskToReadyList>
 80026a2:	e001      	b.n	80026a8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026a8:	697b      	ldr	r3, [r7, #20]
	}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3728      	adds	r7, #40	@ 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b08c      	sub	sp, #48	@ 0x30
 80026b6:	af04      	add	r7, sp, #16
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	4613      	mov	r3, r2
 80026c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fbda 	bl	8003e80 <pvPortMalloc>
 80026cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00e      	beq.n	80026f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80026d4:	20a8      	movs	r0, #168	@ 0xa8
 80026d6:	f001 fbd3 	bl	8003e80 <pvPortMalloc>
 80026da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e8:	e005      	b.n	80026f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f001 fc90 	bl	8004010 <vPortFree>
 80026f0:	e001      	b.n	80026f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002704:	88fa      	ldrh	r2, [r7, #6]
 8002706:	2300      	movs	r3, #0
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	9302      	str	r3, [sp, #8]
 800270e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f80e 	bl	800273c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002720:	69f8      	ldr	r0, [r7, #28]
 8002722:	f000 f8ab 	bl	800287c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002726:	2301      	movs	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e002      	b.n	8002732 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800272c:	f04f 33ff 	mov.w	r3, #4294967295
 8002730:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002732:	69bb      	ldr	r3, [r7, #24]
	}
 8002734:	4618      	mov	r0, r3
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	461a      	mov	r2, r3
 8002754:	21a5      	movs	r1, #165	@ 0xa5
 8002756:	f001 fd71 	bl	800423c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800275a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002764:	3b01      	subs	r3, #1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f023 0307 	bic.w	r3, r3, #7
 8002772:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	617b      	str	r3, [r7, #20]
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	e7fd      	b.n	8002792 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	e012      	b.n	80027c2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	7819      	ldrb	r1, [r3, #0]
 80027a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	3334      	adds	r3, #52	@ 0x34
 80027ac:	460a      	mov	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d9e9      	bls.n	800279c <prvInitialiseNewTask+0x60>
 80027c8:	e000      	b.n	80027cc <prvInitialiseNewTask+0x90>
		{
			break;
 80027ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d6:	2b37      	cmp	r3, #55	@ 0x37
 80027d8:	d901      	bls.n	80027de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027da:	2337      	movs	r3, #55	@ 0x37
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80027ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ec:	2200      	movs	r2, #0
 80027ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f2:	3304      	adds	r3, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff f976 	bl	8001ae6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fc:	3318      	adds	r3, #24
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f971 	bl	8001ae6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002808:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002812:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281c:	2200      	movs	r2, #0
 800281e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002824:	2200      	movs	r2, #0
 8002826:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	3354      	adds	r3, #84	@ 0x54
 800282e:	224c      	movs	r2, #76	@ 0x4c
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fd02 	bl	800423c <memset>
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <prvInitialiseNewTask+0x134>)
 800283c:	659a      	str	r2, [r3, #88]	@ 0x58
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	4a0c      	ldr	r2, [pc, #48]	@ (8002874 <prvInitialiseNewTask+0x138>)
 8002842:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	4a0c      	ldr	r2, [pc, #48]	@ (8002878 <prvInitialiseNewTask+0x13c>)
 8002848:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	69b8      	ldr	r0, [r7, #24]
 8002850:	f001 f926 	bl	8003aa0 <pxPortInitialiseStack>
 8002854:	4602      	mov	r2, r0
 8002856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002858:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800285a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002866:	bf00      	nop
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20001cc0 	.word	0x20001cc0
 8002874:	20001d28 	.word	0x20001d28
 8002878:	20001d90 	.word	0x20001d90

0800287c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002884:	f001 f9fa 	bl	8003c7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002888:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <prvAddNewTaskToReadyList+0xc4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a2c      	ldr	r2, [pc, #176]	@ (8002940 <prvAddNewTaskToReadyList+0xc4>)
 8002890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002892:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <prvAddNewTaskToReadyList+0xc8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800289a:	4a2a      	ldr	r2, [pc, #168]	@ (8002944 <prvAddNewTaskToReadyList+0xc8>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <prvAddNewTaskToReadyList+0xc4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d110      	bne.n	80028ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028a8:	f000 fc30 	bl	800310c <prvInitialiseTaskLists>
 80028ac:	e00d      	b.n	80028ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028ae:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <prvAddNewTaskToReadyList+0xcc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028b6:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <prvAddNewTaskToReadyList+0xc8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d802      	bhi.n	80028ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002944 <prvAddNewTaskToReadyList+0xc8>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <prvAddNewTaskToReadyList+0xd0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <prvAddNewTaskToReadyList+0xd0>)
 80028d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <prvAddNewTaskToReadyList+0xd0>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <prvAddNewTaskToReadyList+0xd4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d903      	bls.n	80028f0 <prvAddNewTaskToReadyList+0x74>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <prvAddNewTaskToReadyList+0xd4>)
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4a15      	ldr	r2, [pc, #84]	@ (8002954 <prvAddNewTaskToReadyList+0xd8>)
 80028fe:	441a      	add	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f7ff f8f9 	bl	8001afe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800290c:	f001 f9e6 	bl	8003cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002910:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <prvAddNewTaskToReadyList+0xcc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00e      	beq.n	8002936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <prvAddNewTaskToReadyList+0xc8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	429a      	cmp	r2, r3
 8002924:	d207      	bcs.n	8002936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <prvAddNewTaskToReadyList+0xdc>)
 8002928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000d38 	.word	0x20000d38
 8002944:	20000864 	.word	0x20000864
 8002948:	20000d44 	.word	0x20000d44
 800294c:	20000d54 	.word	0x20000d54
 8002950:	20000d40 	.word	0x20000d40
 8002954:	20000868 	.word	0x20000868
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d018      	beq.n	80029a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800296e:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <vTaskDelay+0x64>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <vTaskDelay+0x32>
	__asm volatile
 8002976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	60bb      	str	r3, [r7, #8]
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	e7fd      	b.n	800298a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800298e:	f000 f88b 	bl	8002aa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002992:	2100      	movs	r1, #0
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fd0f 	bl	80033b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800299a:	f000 f893 	bl	8002ac4 <xTaskResumeAll>
 800299e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80029a6:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <vTaskDelay+0x68>)
 80029a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000d60 	.word	0x20000d60
 80029c4:	e000ed04 	.word	0xe000ed04

080029c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029d6:	463a      	mov	r2, r7
 80029d8:	1d39      	adds	r1, r7, #4
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f830 	bl	8001a44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	9202      	str	r2, [sp, #8]
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	2300      	movs	r3, #0
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2300      	movs	r3, #0
 80029f4:	460a      	mov	r2, r1
 80029f6:	4924      	ldr	r1, [pc, #144]	@ (8002a88 <vTaskStartScheduler+0xc0>)
 80029f8:	4824      	ldr	r0, [pc, #144]	@ (8002a8c <vTaskStartScheduler+0xc4>)
 80029fa:	f7ff fdfb 	bl	80025f4 <xTaskCreateStatic>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a23      	ldr	r2, [pc, #140]	@ (8002a90 <vTaskStartScheduler+0xc8>)
 8002a02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a04:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <vTaskStartScheduler+0xc8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e001      	b.n	8002a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002a1c:	f000 fd20 	bl	8003460 <xTimerCreateTimerTask>
 8002a20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d11b      	bne.n	8002a60 <vTaskStartScheduler+0x98>
	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	613b      	str	r3, [r7, #16]
}
 8002a3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <vTaskStartScheduler+0xcc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3354      	adds	r3, #84	@ 0x54
 8002a42:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <vTaskStartScheduler+0xd0>)
 8002a44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <vTaskStartScheduler+0xd4>)
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a4e:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <vTaskStartScheduler+0xd8>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <vTaskStartScheduler+0xdc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a5a:	f001 f89d 	bl	8003b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a5e:	e00f      	b.n	8002a80 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d10b      	bne.n	8002a80 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	60fb      	str	r3, [r7, #12]
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <vTaskStartScheduler+0xb4>
}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	08004450 	.word	0x08004450
 8002a8c:	080030dd 	.word	0x080030dd
 8002a90:	20000d5c 	.word	0x20000d5c
 8002a94:	20000864 	.word	0x20000864
 8002a98:	20000010 	.word	0x20000010
 8002a9c:	20000d58 	.word	0x20000d58
 8002aa0:	20000d44 	.word	0x20000d44
 8002aa4:	20000d3c 	.word	0x20000d3c

08002aa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <vTaskSuspendAll+0x18>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	4a03      	ldr	r2, [pc, #12]	@ (8002ac0 <vTaskSuspendAll+0x18>)
 8002ab4:	6013      	str	r3, [r2, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000d60 	.word	0x20000d60

08002ac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ad2:	4b42      	ldr	r3, [pc, #264]	@ (8002bdc <xTaskResumeAll+0x118>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10b      	bne.n	8002af2 <xTaskResumeAll+0x2e>
	__asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	603b      	str	r3, [r7, #0]
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	e7fd      	b.n	8002aee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002af2:	f001 f8c3 	bl	8003c7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002af6:	4b39      	ldr	r3, [pc, #228]	@ (8002bdc <xTaskResumeAll+0x118>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	4a37      	ldr	r2, [pc, #220]	@ (8002bdc <xTaskResumeAll+0x118>)
 8002afe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b00:	4b36      	ldr	r3, [pc, #216]	@ (8002bdc <xTaskResumeAll+0x118>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d162      	bne.n	8002bce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b08:	4b35      	ldr	r3, [pc, #212]	@ (8002be0 <xTaskResumeAll+0x11c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05e      	beq.n	8002bce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b10:	e02f      	b.n	8002b72 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b12:	4b34      	ldr	r3, [pc, #208]	@ (8002be4 <xTaskResumeAll+0x120>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3318      	adds	r3, #24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f848 	bl	8001bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f843 	bl	8001bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b32:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <xTaskResumeAll+0x124>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d903      	bls.n	8002b42 <xTaskResumeAll+0x7e>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002be8 <xTaskResumeAll+0x124>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4a27      	ldr	r2, [pc, #156]	@ (8002bec <xTaskResumeAll+0x128>)
 8002b50:	441a      	add	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7fe ffd0 	bl	8001afe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b62:	4b23      	ldr	r3, [pc, #140]	@ (8002bf0 <xTaskResumeAll+0x12c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002b6c:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <xTaskResumeAll+0x130>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b72:	4b1c      	ldr	r3, [pc, #112]	@ (8002be4 <xTaskResumeAll+0x120>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1cb      	bne.n	8002b12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b80:	f000 fb68 	bl	8003254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b84:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <xTaskResumeAll+0x134>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b90:	f000 f844 	bl	8002c1c <xTaskIncrementTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <xTaskResumeAll+0x130>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f1      	bne.n	8002b90 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <xTaskResumeAll+0x134>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bb2:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <xTaskResumeAll+0x130>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <xTaskResumeAll+0x138>)
 8002bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bce:	f001 f885 	bl	8003cdc <vPortExitCritical>

	return xAlreadyYielded;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000d60 	.word	0x20000d60
 8002be0:	20000d38 	.word	0x20000d38
 8002be4:	20000cf8 	.word	0x20000cf8
 8002be8:	20000d40 	.word	0x20000d40
 8002bec:	20000868 	.word	0x20000868
 8002bf0:	20000864 	.word	0x20000864
 8002bf4:	20000d4c 	.word	0x20000d4c
 8002bf8:	20000d48 	.word	0x20000d48
 8002bfc:	e000ed04 	.word	0xe000ed04

08002c00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c06:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <xTaskGetTickCount+0x18>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c0c:	687b      	ldr	r3, [r7, #4]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000d3c 	.word	0x20000d3c

08002c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c26:	4b52      	ldr	r3, [pc, #328]	@ (8002d70 <xTaskIncrementTick+0x154>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 808f 	bne.w	8002d4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c30:	4b50      	ldr	r3, [pc, #320]	@ (8002d74 <xTaskIncrementTick+0x158>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c38:	4a4e      	ldr	r2, [pc, #312]	@ (8002d74 <xTaskIncrementTick+0x158>)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d121      	bne.n	8002c88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c44:	4b4c      	ldr	r3, [pc, #304]	@ (8002d78 <xTaskIncrementTick+0x15c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	603b      	str	r3, [r7, #0]
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	e7fd      	b.n	8002c62 <xTaskIncrementTick+0x46>
 8002c66:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <xTaskIncrementTick+0x15c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <xTaskIncrementTick+0x160>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a41      	ldr	r2, [pc, #260]	@ (8002d78 <xTaskIncrementTick+0x15c>)
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4a41      	ldr	r2, [pc, #260]	@ (8002d7c <xTaskIncrementTick+0x160>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b41      	ldr	r3, [pc, #260]	@ (8002d80 <xTaskIncrementTick+0x164>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	4a3f      	ldr	r2, [pc, #252]	@ (8002d80 <xTaskIncrementTick+0x164>)
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	f000 fae6 	bl	8003254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c88:	4b3e      	ldr	r3, [pc, #248]	@ (8002d84 <xTaskIncrementTick+0x168>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d34e      	bcc.n	8002d30 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c92:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <xTaskIncrementTick+0x15c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xTaskIncrementTick+0x84>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xTaskIncrementTick+0x86>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca6:	4b37      	ldr	r3, [pc, #220]	@ (8002d84 <xTaskIncrementTick+0x168>)
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	601a      	str	r2, [r3, #0]
					break;
 8002cae:	e03f      	b.n	8002d30 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cb0:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <xTaskIncrementTick+0x15c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d203      	bcs.n	8002cd0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d84 <xTaskIncrementTick+0x168>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
						break;
 8002cce:	e02f      	b.n	8002d30 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe ff6d 	bl	8001bb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3318      	adds	r3, #24
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe ff64 	bl	8001bb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf0:	4b25      	ldr	r3, [pc, #148]	@ (8002d88 <xTaskIncrementTick+0x16c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d903      	bls.n	8002d00 <xTaskIncrementTick+0xe4>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	4a22      	ldr	r2, [pc, #136]	@ (8002d88 <xTaskIncrementTick+0x16c>)
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <xTaskIncrementTick+0x170>)
 8002d0e:	441a      	add	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f7fe fef1 	bl	8001afe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d20:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <xTaskIncrementTick+0x174>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3b3      	bcc.n	8002c92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d2e:	e7b0      	b.n	8002c92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <xTaskIncrementTick+0x174>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d36:	4915      	ldr	r1, [pc, #84]	@ (8002d8c <xTaskIncrementTick+0x170>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d907      	bls.n	8002d58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e004      	b.n	8002d58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <xTaskIncrementTick+0x178>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	4a0f      	ldr	r2, [pc, #60]	@ (8002d94 <xTaskIncrementTick+0x178>)
 8002d56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <xTaskIncrementTick+0x17c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d64:	697b      	ldr	r3, [r7, #20]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000d60 	.word	0x20000d60
 8002d74:	20000d3c 	.word	0x20000d3c
 8002d78:	20000cf0 	.word	0x20000cf0
 8002d7c:	20000cf4 	.word	0x20000cf4
 8002d80:	20000d50 	.word	0x20000d50
 8002d84:	20000d58 	.word	0x20000d58
 8002d88:	20000d40 	.word	0x20000d40
 8002d8c:	20000868 	.word	0x20000868
 8002d90:	20000864 	.word	0x20000864
 8002d94:	20000d48 	.word	0x20000d48
 8002d98:	20000d4c 	.word	0x20000d4c

08002d9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002da2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <vTaskSwitchContext+0xb0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002daa:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <vTaskSwitchContext+0xb4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002db0:	e047      	b.n	8002e42 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8002db2:	4b27      	ldr	r3, [pc, #156]	@ (8002e50 <vTaskSwitchContext+0xb4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002db8:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <vTaskSwitchContext+0xb8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e011      	b.n	8002de4 <vTaskSwitchContext+0x48>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <vTaskSwitchContext+0x42>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	607b      	str	r3, [r7, #4]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <vTaskSwitchContext+0x3e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	491c      	ldr	r1, [pc, #112]	@ (8002e58 <vTaskSwitchContext+0xbc>)
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0e3      	beq.n	8002dc0 <vTaskSwitchContext+0x24>
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4a15      	ldr	r2, [pc, #84]	@ (8002e58 <vTaskSwitchContext+0xbc>)
 8002e04:	4413      	add	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d104      	bne.n	8002e28 <vTaskSwitchContext+0x8c>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <vTaskSwitchContext+0xc0>)
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4a08      	ldr	r2, [pc, #32]	@ (8002e54 <vTaskSwitchContext+0xb8>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <vTaskSwitchContext+0xc0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3354      	adds	r3, #84	@ 0x54
 8002e3e:	4a08      	ldr	r2, [pc, #32]	@ (8002e60 <vTaskSwitchContext+0xc4>)
 8002e40:	6013      	str	r3, [r2, #0]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20000d60 	.word	0x20000d60
 8002e50:	20000d4c 	.word	0x20000d4c
 8002e54:	20000d40 	.word	0x20000d40
 8002e58:	20000868 	.word	0x20000868
 8002e5c:	20000864 	.word	0x20000864
 8002e60:	20000010 	.word	0x20000010

08002e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	60fb      	str	r3, [r7, #12]
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e8c:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <vTaskPlaceOnEventList+0x48>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3318      	adds	r3, #24
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe fe55 	bl	8001b44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	6838      	ldr	r0, [r7, #0]
 8002e9e:	f000 fa8b 	bl	80033b8 <prvAddCurrentTaskToDelayedList>
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000864 	.word	0x20000864

08002eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10b      	bne.n	8002eda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	617b      	str	r3, [r7, #20]
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	e7fd      	b.n	8002ed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eda:	4b0a      	ldr	r3, [pc, #40]	@ (8002f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3318      	adds	r3, #24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7fe fe0b 	bl	8001afe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	68b8      	ldr	r0, [r7, #8]
 8002ef8:	f000 fa5e 	bl	80033b8 <prvAddCurrentTaskToDelayedList>
	}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000864 	.word	0x20000864

08002f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60fb      	str	r3, [r7, #12]
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	e7fd      	b.n	8002f32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	3318      	adds	r3, #24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fe3a 	bl	8001bb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <xTaskRemoveFromEventList+0xb0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d11d      	bne.n	8002f84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fe31 	bl	8001bb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f56:	4b19      	ldr	r3, [pc, #100]	@ (8002fbc <xTaskRemoveFromEventList+0xb4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d903      	bls.n	8002f66 <xTaskRemoveFromEventList+0x5e>
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <xTaskRemoveFromEventList+0xb4>)
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4a13      	ldr	r2, [pc, #76]	@ (8002fc0 <xTaskRemoveFromEventList+0xb8>)
 8002f74:	441a      	add	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7fe fdbe 	bl	8001afe <vListInsertEnd>
 8002f82:	e005      	b.n	8002f90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	3318      	adds	r3, #24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	480e      	ldr	r0, [pc, #56]	@ (8002fc4 <xTaskRemoveFromEventList+0xbc>)
 8002f8c:	f7fe fdb7 	bl	8001afe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f94:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <xTaskRemoveFromEventList+0xc0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d905      	bls.n	8002faa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <xTaskRemoveFromEventList+0xc4>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e001      	b.n	8002fae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002fae:	697b      	ldr	r3, [r7, #20]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000d60 	.word	0x20000d60
 8002fbc:	20000d40 	.word	0x20000d40
 8002fc0:	20000868 	.word	0x20000868
 8002fc4:	20000cf8 	.word	0x20000cf8
 8002fc8:	20000864 	.word	0x20000864
 8002fcc:	20000d4c 	.word	0x20000d4c

08002fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <vTaskInternalSetTimeOutState+0x24>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <vTaskInternalSetTimeOutState+0x28>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	605a      	str	r2, [r3, #4]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000d50 	.word	0x20000d50
 8002ff8:	20000d3c 	.word	0x20000d3c

08002ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	613b      	str	r3, [r7, #16]
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10b      	bne.n	8003042 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60fb      	str	r3, [r7, #12]
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	e7fd      	b.n	800303e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003042:	f000 fe1b 	bl	8003c7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003046:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <xTaskCheckForTimeOut+0xc0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d102      	bne.n	8003066 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	e023      	b.n	80030ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <xTaskCheckForTimeOut+0xc4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d007      	beq.n	8003082 <xTaskCheckForTimeOut+0x86>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800307c:	2301      	movs	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	e015      	b.n	80030ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	429a      	cmp	r2, r3
 800308a:	d20b      	bcs.n	80030a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff99 	bl	8002fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e004      	b.n	80030ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030ae:	f000 fe15 	bl	8003cdc <vPortExitCritical>

	return xReturn;
 80030b2:	69fb      	ldr	r3, [r7, #28]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000d3c 	.word	0x20000d3c
 80030c0:	20000d50 	.word	0x20000d50

080030c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <vTaskMissedYield+0x14>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000d4c 	.word	0x20000d4c

080030dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030e4:	f000 f852 	bl	800318c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <prvIdleTask+0x28>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d9f9      	bls.n	80030e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <prvIdleTask+0x2c>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003100:	e7f0      	b.n	80030e4 <prvIdleTask+0x8>
 8003102:	bf00      	nop
 8003104:	20000868 	.word	0x20000868
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e00c      	b.n	8003132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a12      	ldr	r2, [pc, #72]	@ (800316c <prvInitialiseTaskLists+0x60>)
 8003124:	4413      	add	r3, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fcbe 	bl	8001aa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3301      	adds	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b37      	cmp	r3, #55	@ 0x37
 8003136:	d9ef      	bls.n	8003118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003138:	480d      	ldr	r0, [pc, #52]	@ (8003170 <prvInitialiseTaskLists+0x64>)
 800313a:	f7fe fcb5 	bl	8001aa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800313e:	480d      	ldr	r0, [pc, #52]	@ (8003174 <prvInitialiseTaskLists+0x68>)
 8003140:	f7fe fcb2 	bl	8001aa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003144:	480c      	ldr	r0, [pc, #48]	@ (8003178 <prvInitialiseTaskLists+0x6c>)
 8003146:	f7fe fcaf 	bl	8001aa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800314a:	480c      	ldr	r0, [pc, #48]	@ (800317c <prvInitialiseTaskLists+0x70>)
 800314c:	f7fe fcac 	bl	8001aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003150:	480b      	ldr	r0, [pc, #44]	@ (8003180 <prvInitialiseTaskLists+0x74>)
 8003152:	f7fe fca9 	bl	8001aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003156:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <prvInitialiseTaskLists+0x78>)
 8003158:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <prvInitialiseTaskLists+0x64>)
 800315a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800315c:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <prvInitialiseTaskLists+0x7c>)
 800315e:	4a05      	ldr	r2, [pc, #20]	@ (8003174 <prvInitialiseTaskLists+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000868 	.word	0x20000868
 8003170:	20000cc8 	.word	0x20000cc8
 8003174:	20000cdc 	.word	0x20000cdc
 8003178:	20000cf8 	.word	0x20000cf8
 800317c:	20000d0c 	.word	0x20000d0c
 8003180:	20000d24 	.word	0x20000d24
 8003184:	20000cf0 	.word	0x20000cf0
 8003188:	20000cf4 	.word	0x20000cf4

0800318c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003192:	e019      	b.n	80031c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003194:	f000 fd72 	bl	8003c7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003198:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <prvCheckTasksWaitingTermination+0x50>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fd05 	bl	8001bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <prvCheckTasksWaitingTermination+0x54>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a0b      	ldr	r2, [pc, #44]	@ (80031e0 <prvCheckTasksWaitingTermination+0x54>)
 80031b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031b4:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031be:	f000 fd8d 	bl	8003cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f810 	bl	80031e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031c8:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e1      	bne.n	8003194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000d0c 	.word	0x20000d0c
 80031e0:	20000d38 	.word	0x20000d38
 80031e4:	20000d20 	.word	0x20000d20

080031e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3354      	adds	r3, #84	@ 0x54
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 f829 	bl	800424c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003200:	2b00      	cmp	r3, #0
 8003202:	d108      	bne.n	8003216 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	4618      	mov	r0, r3
 800320a:	f000 ff01 	bl	8004010 <vPortFree>
				vPortFree( pxTCB );
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fefe 	bl	8004010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003214:	e019      	b.n	800324a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800321c:	2b01      	cmp	r3, #1
 800321e:	d103      	bne.n	8003228 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fef5 	bl	8004010 <vPortFree>
	}
 8003226:	e010      	b.n	800324a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800322e:	2b02      	cmp	r3, #2
 8003230:	d00b      	beq.n	800324a <prvDeleteTCB+0x62>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	60fb      	str	r3, [r7, #12]
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	e7fd      	b.n	8003246 <prvDeleteTCB+0x5e>
	}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800325a:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <prvResetNextTaskUnblockTime+0x40>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <prvResetNextTaskUnblockTime+0x14>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <prvResetNextTaskUnblockTime+0x16>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <prvResetNextTaskUnblockTime+0x44>)
 8003270:	f04f 32ff 	mov.w	r2, #4294967295
 8003274:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003276:	e008      	b.n	800328a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <prvResetNextTaskUnblockTime+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a04      	ldr	r2, [pc, #16]	@ (8003298 <prvResetNextTaskUnblockTime+0x44>)
 8003288:	6013      	str	r3, [r2, #0]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	20000cf0 	.word	0x20000cf0
 8003298:	20000d58 	.word	0x20000d58

0800329c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032a2:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <xTaskGetSchedulerState+0x34>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032aa:	2301      	movs	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	e008      	b.n	80032c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <xTaskGetSchedulerState+0x38>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032b8:	2302      	movs	r3, #2
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	e001      	b.n	80032c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032c2:	687b      	ldr	r3, [r7, #4]
	}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000d44 	.word	0x20000d44
 80032d4:	20000d60 	.word	0x20000d60

080032d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d058      	beq.n	80033a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80032ee:	4b2f      	ldr	r3, [pc, #188]	@ (80033ac <xTaskPriorityDisinherit+0xd4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d00b      	beq.n	8003310 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60fb      	str	r3, [r7, #12]
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60bb      	str	r3, [r7, #8]
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003334:	1e5a      	subs	r2, r3, #1
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003342:	429a      	cmp	r2, r3
 8003344:	d02c      	beq.n	80033a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	d128      	bne.n	80033a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3304      	adds	r3, #4
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fc2e 	bl	8001bb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003370:	4b0f      	ldr	r3, [pc, #60]	@ (80033b0 <xTaskPriorityDisinherit+0xd8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d903      	bls.n	8003380 <xTaskPriorityDisinherit+0xa8>
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <xTaskPriorityDisinherit+0xd8>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <xTaskPriorityDisinherit+0xdc>)
 800338e:	441a      	add	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fe fbb1 	bl	8001afe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033a0:	697b      	ldr	r3, [r7, #20]
	}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000864 	.word	0x20000864
 80033b0:	20000d40 	.word	0x20000d40
 80033b4:	20000868 	.word	0x20000868

080033b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033c2:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <prvAddCurrentTaskToDelayedList+0x90>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033c8:	4b20      	ldr	r3, [pc, #128]	@ (800344c <prvAddCurrentTaskToDelayedList+0x94>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fbf0 	bl	8001bb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d10a      	bne.n	80033f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e2:	4b1a      	ldr	r3, [pc, #104]	@ (800344c <prvAddCurrentTaskToDelayedList+0x94>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4819      	ldr	r0, [pc, #100]	@ (8003450 <prvAddCurrentTaskToDelayedList+0x98>)
 80033ec:	f7fe fb87 	bl	8001afe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033f0:	e026      	b.n	8003440 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033fa:	4b14      	ldr	r3, [pc, #80]	@ (800344c <prvAddCurrentTaskToDelayedList+0x94>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	429a      	cmp	r2, r3
 8003408:	d209      	bcs.n	800341e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <prvAddCurrentTaskToDelayedList+0x9c>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <prvAddCurrentTaskToDelayedList+0x94>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f7fe fb94 	bl	8001b44 <vListInsert>
}
 800341c:	e010      	b.n	8003440 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <prvAddCurrentTaskToDelayedList+0x94>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f7fe fb8a 	bl	8001b44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d202      	bcs.n	8003440 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800343a:	4a08      	ldr	r2, [pc, #32]	@ (800345c <prvAddCurrentTaskToDelayedList+0xa4>)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6013      	str	r3, [r2, #0]
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000d3c 	.word	0x20000d3c
 800344c:	20000864 	.word	0x20000864
 8003450:	20000d24 	.word	0x20000d24
 8003454:	20000cf4 	.word	0x20000cf4
 8003458:	20000cf0 	.word	0x20000cf0
 800345c:	20000d58 	.word	0x20000d58

08003460 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800346a:	f000 fad9 	bl	8003a20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800346e:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <xTimerCreateTimerTask+0x84>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d021      	beq.n	80034ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800347e:	1d3a      	adds	r2, r7, #4
 8003480:	f107 0108 	add.w	r1, r7, #8
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe faf3 	bl	8001a74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	9202      	str	r2, [sp, #8]
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	2302      	movs	r3, #2
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	460a      	mov	r2, r1
 80034a0:	4911      	ldr	r1, [pc, #68]	@ (80034e8 <xTimerCreateTimerTask+0x88>)
 80034a2:	4812      	ldr	r0, [pc, #72]	@ (80034ec <xTimerCreateTimerTask+0x8c>)
 80034a4:	f7ff f8a6 	bl	80025f4 <xTaskCreateStatic>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4a11      	ldr	r2, [pc, #68]	@ (80034f0 <xTimerCreateTimerTask+0x90>)
 80034ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80034ae:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <xTimerCreateTimerTask+0x90>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80034b6:	2301      	movs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	613b      	str	r3, [r7, #16]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80034d8:	697b      	ldr	r3, [r7, #20]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000d94 	.word	0x20000d94
 80034e8:	08004458 	.word	0x08004458
 80034ec:	08003615 	.word	0x08003615
 80034f0:	20000d98 	.word	0x20000d98

080034f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <xTimerGenericCommand+0x30>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	623b      	str	r3, [r7, #32]
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <xTimerGenericCommand+0x98>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02a      	beq.n	8003582 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b05      	cmp	r3, #5
 800353c:	dc18      	bgt.n	8003570 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800353e:	f7ff fead 	bl	800329c <xTaskGetSchedulerState>
 8003542:	4603      	mov	r3, r0
 8003544:	2b02      	cmp	r3, #2
 8003546:	d109      	bne.n	800355c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003548:	4b10      	ldr	r3, [pc, #64]	@ (800358c <xTimerGenericCommand+0x98>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	f107 0110 	add.w	r1, r7, #16
 8003550:	2300      	movs	r3, #0
 8003552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003554:	f7fe fc62 	bl	8001e1c <xQueueGenericSend>
 8003558:	6278      	str	r0, [r7, #36]	@ 0x24
 800355a:	e012      	b.n	8003582 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800355c:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <xTimerGenericCommand+0x98>)
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	f107 0110 	add.w	r1, r7, #16
 8003564:	2300      	movs	r3, #0
 8003566:	2200      	movs	r2, #0
 8003568:	f7fe fc58 	bl	8001e1c <xQueueGenericSend>
 800356c:	6278      	str	r0, [r7, #36]	@ 0x24
 800356e:	e008      	b.n	8003582 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <xTimerGenericCommand+0x98>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	f107 0110 	add.w	r1, r7, #16
 8003578:	2300      	movs	r3, #0
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	f7fe fd50 	bl	8002020 <xQueueGenericSendFromISR>
 8003580:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003584:	4618      	mov	r0, r3
 8003586:	3728      	adds	r7, #40	@ 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000d94 	.word	0x20000d94

08003590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800359a:	4b1d      	ldr	r3, [pc, #116]	@ (8003610 <prvProcessExpiredTimer+0x80>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fb03 	bl	8001bb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d123      	bne.n	80035fe <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	18d1      	adds	r1, r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f000 f8cc 	bl	8003760 <prvInsertTimerInActiveList>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d017      	beq.n	80035fe <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80035ce:	2300      	movs	r3, #0
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	2100      	movs	r1, #0
 80035d8:	6978      	ldr	r0, [r7, #20]
 80035da:	f7ff ff8b 	bl	80034f4 <xTimerGenericCommand>
 80035de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60fb      	str	r3, [r7, #12]
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	4798      	blx	r3
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000d8c 	.word	0x20000d8c

08003614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f859 	bl	80036d8 <prvGetNextExpireTime>
 8003626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4619      	mov	r1, r3
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f805 	bl	800363c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003632:	f000 f8d7 	bl	80037e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003636:	bf00      	nop
 8003638:	e7f0      	b.n	800361c <prvTimerTask+0x8>
	...

0800363c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003646:	f7ff fa2f 	bl	8002aa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f866 	bl	8003720 <prvSampleTimeNow>
 8003654:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d130      	bne.n	80036be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <prvProcessTimerOrBlockTask+0x3c>
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	429a      	cmp	r2, r3
 8003668:	d806      	bhi.n	8003678 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800366a:	f7ff fa2b 	bl	8002ac4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff8d 	bl	8003590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003676:	e024      	b.n	80036c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800367e:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <prvProcessTimerOrBlockTask+0x90>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003690:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <prvProcessTimerOrBlockTask+0x94>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	f7fe ff75 	bl	800258c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80036a2:	f7ff fa0f 	bl	8002ac4 <xTaskResumeAll>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <prvProcessTimerOrBlockTask+0x98>)
 80036ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	f3bf 8f6f 	isb	sy
}
 80036bc:	e001      	b.n	80036c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80036be:	f7ff fa01 	bl	8002ac4 <xTaskResumeAll>
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000d90 	.word	0x20000d90
 80036d0:	20000d94 	.word	0x20000d94
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036e0:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <prvGetNextExpireTime+0x44>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <prvGetNextExpireTime+0x44>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e001      	b.n	800370e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800370e:	68fb      	ldr	r3, [r7, #12]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000d8c 	.word	0x20000d8c

08003720 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003728:	f7ff fa6a 	bl	8002c00 <xTaskGetTickCount>
 800372c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800372e:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <prvSampleTimeNow+0x3c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	429a      	cmp	r2, r3
 8003736:	d205      	bcs.n	8003744 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003738:	f000 f910 	bl	800395c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e002      	b.n	800374a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800374a:	4a04      	ldr	r2, [pc, #16]	@ (800375c <prvSampleTimeNow+0x3c>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000d9c 	.word	0x20000d9c

08003760 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d812      	bhi.n	80037ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	1ad2      	subs	r2, r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e01b      	b.n	80037d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <prvInsertTimerInActiveList+0x7c>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3304      	adds	r3, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f7fe f9cd 	bl	8001b44 <vListInsert>
 80037aa:	e012      	b.n	80037d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d206      	bcs.n	80037c2 <prvInsertTimerInActiveList+0x62>
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e007      	b.n	80037d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037c2:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <prvInsertTimerInActiveList+0x80>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f7fe f9b9 	bl	8001b44 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80037d2:	697b      	ldr	r3, [r7, #20]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000d90 	.word	0x20000d90
 80037e0:	20000d8c 	.word	0x20000d8c

080037e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	@ 0x38
 80037e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037ea:	e0a5      	b.n	8003938 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da19      	bge.n	8003826 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	3304      	adds	r3, #4
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	61fb      	str	r3, [r7, #28]
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	e7fd      	b.n	8003812 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800381c:	6850      	ldr	r0, [r2, #4]
 800381e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	4611      	mov	r1, r2
 8003824:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f2c0 8085 	blt.w	8003938 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	3304      	adds	r3, #4
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe f9b8 	bl	8001bb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003844:	463b      	mov	r3, r7
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff6a 	bl	8003720 <prvSampleTimeNow>
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d86c      	bhi.n	800392e <prvProcessReceivedCommands+0x14a>
 8003854:	a201      	add	r2, pc, #4	@ (adr r2, 800385c <prvProcessReceivedCommands+0x78>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003885 	.word	0x08003885
 8003860:	08003885 	.word	0x08003885
 8003864:	08003885 	.word	0x08003885
 8003868:	0800392f 	.word	0x0800392f
 800386c:	080038e3 	.word	0x080038e3
 8003870:	0800391d 	.word	0x0800391d
 8003874:	08003885 	.word	0x08003885
 8003878:	08003885 	.word	0x08003885
 800387c:	0800392f 	.word	0x0800392f
 8003880:	080038e3 	.word	0x080038e3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	18d1      	adds	r1, r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003892:	f7ff ff65 	bl	8003760 <prvInsertTimerInActiveList>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d04a      	beq.n	8003932 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d142      	bne.n	8003932 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	441a      	add	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2300      	movs	r3, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038be:	f7ff fe19 	bl	80034f4 <xTimerGenericCommand>
 80038c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d133      	bne.n	8003932 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	61bb      	str	r3, [r7, #24]
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	e7fd      	b.n	80038de <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	617b      	str	r3, [r7, #20]
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	18d1      	adds	r1, r2, r3
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003916:	f7ff ff23 	bl	8003760 <prvInsertTimerInActiveList>
					break;
 800391a:	e00d      	b.n	8003938 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800391c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d107      	bne.n	8003936 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003928:	f000 fb72 	bl	8004010 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800392c:	e003      	b.n	8003936 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <prvProcessReceivedCommands+0x154>
					break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <prvProcessReceivedCommands+0x154>
					break;
 8003936:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003938:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <prvProcessReceivedCommands+0x174>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	1d39      	adds	r1, r7, #4
 800393e:	2200      	movs	r2, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe fc09 	bl	8002158 <xQueueReceive>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	f47f af4f 	bne.w	80037ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	3730      	adds	r7, #48	@ 0x30
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000d94 	.word	0x20000d94

0800395c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003962:	e046      	b.n	80039f2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003964:	4b2c      	ldr	r3, [pc, #176]	@ (8003a18 <prvSwitchTimerLists+0xbc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800396e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <prvSwitchTimerLists+0xbc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3304      	adds	r3, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe f919 	bl	8001bb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d12f      	bne.n	80039f2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d90e      	bls.n	80039c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <prvSwitchTimerLists+0xbc>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7fe f8c2 	bl	8001b44 <vListInsert>
 80039c0:	e017      	b.n	80039f2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	2100      	movs	r1, #0
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff fd91 	bl	80034f4 <xTimerGenericCommand>
 80039d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <prvSwitchTimerLists+0x96>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	603b      	str	r3, [r7, #0]
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	e7fd      	b.n	80039ee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <prvSwitchTimerLists+0xbc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1b3      	bne.n	8003964 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <prvSwitchTimerLists+0xbc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003a02:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <prvSwitchTimerLists+0xc0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <prvSwitchTimerLists+0xbc>)
 8003a08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003a0a:	4a04      	ldr	r2, [pc, #16]	@ (8003a1c <prvSwitchTimerLists+0xc0>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	6013      	str	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000d8c 	.word	0x20000d8c
 8003a1c:	20000d90 	.word	0x20000d90

08003a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a26:	f000 f929 	bl	8003c7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <prvCheckForValidListAndQueue+0x60>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d120      	bne.n	8003a74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003a32:	4814      	ldr	r0, [pc, #80]	@ (8003a84 <prvCheckForValidListAndQueue+0x64>)
 8003a34:	f7fe f838 	bl	8001aa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003a38:	4813      	ldr	r0, [pc, #76]	@ (8003a88 <prvCheckForValidListAndQueue+0x68>)
 8003a3a:	f7fe f835 	bl	8001aa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <prvCheckForValidListAndQueue+0x6c>)
 8003a40:	4a10      	ldr	r2, [pc, #64]	@ (8003a84 <prvCheckForValidListAndQueue+0x64>)
 8003a42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003a44:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <prvCheckForValidListAndQueue+0x70>)
 8003a46:	4a10      	ldr	r2, [pc, #64]	@ (8003a88 <prvCheckForValidListAndQueue+0x68>)
 8003a48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <prvCheckForValidListAndQueue+0x74>)
 8003a50:	4a11      	ldr	r2, [pc, #68]	@ (8003a98 <prvCheckForValidListAndQueue+0x78>)
 8003a52:	2110      	movs	r1, #16
 8003a54:	200a      	movs	r0, #10
 8003a56:	f7fe f941 	bl	8001cdc <xQueueGenericCreateStatic>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4a08      	ldr	r2, [pc, #32]	@ (8003a80 <prvCheckForValidListAndQueue+0x60>)
 8003a5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a60:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <prvCheckForValidListAndQueue+0x60>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <prvCheckForValidListAndQueue+0x60>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	490b      	ldr	r1, [pc, #44]	@ (8003a9c <prvCheckForValidListAndQueue+0x7c>)
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fd64 	bl	800253c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a74:	f000 f932 	bl	8003cdc <vPortExitCritical>
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000d94 	.word	0x20000d94
 8003a84:	20000d64 	.word	0x20000d64
 8003a88:	20000d78 	.word	0x20000d78
 8003a8c:	20000d8c 	.word	0x20000d8c
 8003a90:	20000d90 	.word	0x20000d90
 8003a94:	20000e40 	.word	0x20000e40
 8003a98:	20000da0 	.word	0x20000da0
 8003a9c:	08004460 	.word	0x08004460

08003aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b04      	subs	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f023 0201 	bic.w	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3b04      	subs	r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ad0:	4a08      	ldr	r2, [pc, #32]	@ (8003af4 <pxPortInitialiseStack+0x54>)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3b14      	subs	r3, #20
 8003ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3b20      	subs	r3, #32
 8003ae6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	08003af9 	.word	0x08003af9

08003af8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b02:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <prvTaskExitError+0x54>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d00b      	beq.n	8003b24 <prvTaskExitError+0x2c>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	60fb      	str	r3, [r7, #12]
}
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <prvTaskExitError+0x28>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60bb      	str	r3, [r7, #8]
}
 8003b36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b38:	bf00      	nop
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0fc      	beq.n	8003b3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	2000000c 	.word	0x2000000c

08003b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b50:	4b07      	ldr	r3, [pc, #28]	@ (8003b70 <pxCurrentTCBConst2>)
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	6808      	ldr	r0, [r1, #0]
 8003b56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b5a:	f380 8809 	msr	PSP, r0
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f380 8811 	msr	BASEPRI, r0
 8003b6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003b6e:	4770      	bx	lr

08003b70 <pxCurrentTCBConst2>:
 8003b70:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop

08003b78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003b78:	4806      	ldr	r0, [pc, #24]	@ (8003b94 <prvPortStartFirstTask+0x1c>)
 8003b7a:	6800      	ldr	r0, [r0, #0]
 8003b7c:	6800      	ldr	r0, [r0, #0]
 8003b7e:	f380 8808 	msr	MSP, r0
 8003b82:	b662      	cpsie	i
 8003b84:	b661      	cpsie	f
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	df00      	svc	0
 8003b90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b92:	bf00      	nop
 8003b94:	e000ed08 	.word	0xe000ed08

08003b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b9e:	4b32      	ldr	r3, [pc, #200]	@ (8003c68 <xPortStartScheduler+0xd0>)
 8003ba0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	22ff      	movs	r2, #255	@ 0xff
 8003bae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <xPortStartScheduler+0xd4>)
 8003bc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bcc:	e009      	b.n	8003be2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	4a26      	ldr	r2, [pc, #152]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003bd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bea:	2b80      	cmp	r3, #128	@ 0x80
 8003bec:	d0ef      	beq.n	8003bce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f1c3 0307 	rsb	r3, r3, #7
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00b      	beq.n	8003c12 <xPortStartScheduler+0x7a>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	60bb      	str	r3, [r7, #8]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c12:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003c1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c24:	4a12      	ldr	r2, [pc, #72]	@ (8003c70 <xPortStartScheduler+0xd8>)
 8003c26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c30:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <xPortStartScheduler+0xdc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0f      	ldr	r2, [pc, #60]	@ (8003c74 <xPortStartScheduler+0xdc>)
 8003c36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <xPortStartScheduler+0xdc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0c      	ldr	r2, [pc, #48]	@ (8003c74 <xPortStartScheduler+0xdc>)
 8003c42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c48:	f000 f8b8 	bl	8003dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <xPortStartScheduler+0xe0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c52:	f7ff ff91 	bl	8003b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c56:	f7ff f8a1 	bl	8002d9c <vTaskSwitchContext>
	prvTaskExitError();
 8003c5a:	f7ff ff4d 	bl	8003af8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000e400 	.word	0xe000e400
 8003c6c:	20000e90 	.word	0x20000e90
 8003c70:	20000e94 	.word	0x20000e94
 8003c74:	e000ed20 	.word	0xe000ed20
 8003c78:	2000000c 	.word	0x2000000c

08003c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	607b      	str	r3, [r7, #4]
}
 8003c94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c96:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd4 <vPortEnterCritical+0x58>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd4 <vPortEnterCritical+0x58>)
 8003c9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <vPortEnterCritical+0x58>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d110      	bne.n	8003cca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <vPortEnterCritical+0x5c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <vPortEnterCritical+0x4e>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	603b      	str	r3, [r7, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	e7fd      	b.n	8003cc6 <vPortEnterCritical+0x4a>
	}
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	2000000c 	.word	0x2000000c
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <vPortExitCritical+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <vPortExitCritical+0x26>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	607b      	str	r3, [r7, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	e7fd      	b.n	8003cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d02:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <vPortExitCritical+0x50>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	4a08      	ldr	r2, [pc, #32]	@ (8003d2c <vPortExitCritical+0x50>)
 8003d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d0c:	4b07      	ldr	r3, [pc, #28]	@ (8003d2c <vPortExitCritical+0x50>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <vPortExitCritical+0x44>
 8003d14:	2300      	movs	r3, #0
 8003d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	f383 8811 	msr	BASEPRI, r3
}
 8003d1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	2000000c 	.word	0x2000000c

08003d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d30:	f3ef 8009 	mrs	r0, PSP
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <pxCurrentTCBConst>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d40:	6010      	str	r0, [r2, #0]
 8003d42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003d46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d4a:	f380 8811 	msr	BASEPRI, r0
 8003d4e:	f7ff f825 	bl	8002d9c <vTaskSwitchContext>
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f380 8811 	msr	BASEPRI, r0
 8003d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	6808      	ldr	r0, [r1, #0]
 8003d62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d66:	f380 8809 	msr	PSP, r0
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	4770      	bx	lr

08003d70 <pxCurrentTCBConst>:
 8003d70:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop

08003d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
}
 8003d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d92:	f7fe ff43 	bl	8002c1c <xTaskIncrementTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <SysTick_Handler+0x40>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f383 8811 	msr	BASEPRI, r3
}
 8003dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <vPortSetupTimerInterrupt+0x30>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <vPortSetupTimerInterrupt+0x34>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <vPortSetupTimerInterrupt+0x38>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a09      	ldr	r2, [pc, #36]	@ (8003df8 <vPortSetupTimerInterrupt+0x3c>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	4a08      	ldr	r2, [pc, #32]	@ (8003dfc <vPortSetupTimerInterrupt+0x40>)
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dde:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <vPortSetupTimerInterrupt+0x30>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	e000e010 	.word	0xe000e010
 8003df0:	e000e018 	.word	0xe000e018
 8003df4:	20000000 	.word	0x20000000
 8003df8:	10624dd3 	.word	0x10624dd3
 8003dfc:	e000e014 	.word	0xe000e014

08003e00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e06:	f3ef 8305 	mrs	r3, IPSR
 8003e0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d915      	bls.n	8003e3e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e12:	4a17      	ldr	r2, [pc, #92]	@ (8003e70 <vPortValidateInterruptPriority+0x70>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e1c:	4b15      	ldr	r3, [pc, #84]	@ (8003e74 <vPortValidateInterruptPriority+0x74>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	7afa      	ldrb	r2, [r7, #11]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d20b      	bcs.n	8003e3e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	607b      	str	r3, [r7, #4]
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e78 <vPortValidateInterruptPriority+0x78>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e46:	4b0d      	ldr	r3, [pc, #52]	@ (8003e7c <vPortValidateInterruptPriority+0x7c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d90b      	bls.n	8003e66 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	603b      	str	r3, [r7, #0]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <vPortValidateInterruptPriority+0x62>
	}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr
 8003e70:	e000e3f0 	.word	0xe000e3f0
 8003e74:	20000e90 	.word	0x20000e90
 8003e78:	e000ed0c 	.word	0xe000ed0c
 8003e7c:	20000e94 	.word	0x20000e94

08003e80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	@ 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e8c:	f7fe fe0c 	bl	8002aa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e90:	4b5a      	ldr	r3, [pc, #360]	@ (8003ffc <pvPortMalloc+0x17c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e98:	f000 f916 	bl	80040c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e9c:	4b58      	ldr	r3, [pc, #352]	@ (8004000 <pvPortMalloc+0x180>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 8090 	bne.w	8003fca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d015      	beq.n	8003eee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f023 0307 	bic.w	r3, r3, #7
 8003ec8:	3308      	adds	r3, #8
 8003eca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <pvPortMalloc+0x6e>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	617b      	str	r3, [r7, #20]
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d06a      	beq.n	8003fca <pvPortMalloc+0x14a>
 8003ef4:	4b43      	ldr	r3, [pc, #268]	@ (8004004 <pvPortMalloc+0x184>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d865      	bhi.n	8003fca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003efe:	4b42      	ldr	r3, [pc, #264]	@ (8004008 <pvPortMalloc+0x188>)
 8003f00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <pvPortMalloc+0x188>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f08:	e004      	b.n	8003f14 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d903      	bls.n	8003f26 <pvPortMalloc+0xa6>
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f1      	bne.n	8003f0a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f26:	4b35      	ldr	r3, [pc, #212]	@ (8003ffc <pvPortMalloc+0x17c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d04c      	beq.n	8003fca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2208      	movs	r2, #8
 8003f36:	4413      	add	r3, r2
 8003f38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d920      	bls.n	8003f94 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4413      	add	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <pvPortMalloc+0xfc>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	613b      	str	r3, [r7, #16]
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f8e:	69b8      	ldr	r0, [r7, #24]
 8003f90:	f000 f8fc 	bl	800418c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f94:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <pvPortMalloc+0x184>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	4a19      	ldr	r2, [pc, #100]	@ (8004004 <pvPortMalloc+0x184>)
 8003fa0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fa2:	4b18      	ldr	r3, [pc, #96]	@ (8004004 <pvPortMalloc+0x184>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b19      	ldr	r3, [pc, #100]	@ (800400c <pvPortMalloc+0x18c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d203      	bcs.n	8003fb6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fae:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <pvPortMalloc+0x184>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	@ (800400c <pvPortMalloc+0x18c>)
 8003fb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4b11      	ldr	r3, [pc, #68]	@ (8004000 <pvPortMalloc+0x180>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fca:	f7fe fd7b 	bl	8002ac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <pvPortMalloc+0x170>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60fb      	str	r3, [r7, #12]
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <pvPortMalloc+0x16c>
	return pvReturn;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3728      	adds	r7, #40	@ 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20001cb0 	.word	0x20001cb0
 8004000:	20001cbc 	.word	0x20001cbc
 8004004:	20001cb4 	.word	0x20001cb4
 8004008:	20001ca8 	.word	0x20001ca8
 800400c:	20001cb8 	.word	0x20001cb8

08004010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04a      	beq.n	80040b8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004022:	2308      	movs	r3, #8
 8004024:	425b      	negs	r3, r3
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4413      	add	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <vPortFree+0xb0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <vPortFree+0x46>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60fb      	str	r3, [r7, #12]
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	e7fd      	b.n	8004052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <vPortFree+0x66>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	60bb      	str	r3, [r7, #8]
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <vPortFree+0xb0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d019      	beq.n	80040b8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d115      	bne.n	80040b8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4b0b      	ldr	r3, [pc, #44]	@ (80040c0 <vPortFree+0xb0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800409c:	f7fe fd04 	bl	8002aa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <vPortFree+0xb4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	4a06      	ldr	r2, [pc, #24]	@ (80040c4 <vPortFree+0xb4>)
 80040ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ae:	6938      	ldr	r0, [r7, #16]
 80040b0:	f000 f86c 	bl	800418c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040b4:	f7fe fd06 	bl	8002ac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040b8:	bf00      	nop
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20001cbc 	.word	0x20001cbc
 80040c4:	20001cb4 	.word	0x20001cb4

080040c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ce:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80040d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <prvHeapInit+0xac>)
 80040d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3307      	adds	r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0307 	bic.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004174 <prvHeapInit+0xac>)
 80040f8:	4413      	add	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <prvHeapInit+0xb0>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004106:	4b1c      	ldr	r3, [pc, #112]	@ (8004178 <prvHeapInit+0xb0>)
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	4413      	add	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004114:	2208      	movs	r2, #8
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0307 	bic.w	r3, r3, #7
 8004122:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a15      	ldr	r2, [pc, #84]	@ (800417c <prvHeapInit+0xb4>)
 8004128:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800412a:	4b14      	ldr	r3, [pc, #80]	@ (800417c <prvHeapInit+0xb4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004132:	4b12      	ldr	r3, [pc, #72]	@ (800417c <prvHeapInit+0xb4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <prvHeapInit+0xb4>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4a0a      	ldr	r2, [pc, #40]	@ (8004180 <prvHeapInit+0xb8>)
 8004156:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a09      	ldr	r2, [pc, #36]	@ (8004184 <prvHeapInit+0xbc>)
 800415e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004160:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <prvHeapInit+0xc0>)
 8004162:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000e98 	.word	0x20000e98
 8004178:	20001ca8 	.word	0x20001ca8
 800417c:	20001cb0 	.word	0x20001cb0
 8004180:	20001cb8 	.word	0x20001cb8
 8004184:	20001cb4 	.word	0x20001cb4
 8004188:	20001cbc 	.word	0x20001cbc

0800418c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004194:	4b27      	ldr	r3, [pc, #156]	@ (8004234 <prvInsertBlockIntoFreeList+0xa8>)
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e002      	b.n	80041a0 <prvInsertBlockIntoFreeList+0x14>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d8f7      	bhi.n	800419a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	4413      	add	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d108      	bne.n	80041ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	441a      	add	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	441a      	add	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d118      	bne.n	8004214 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <prvInsertBlockIntoFreeList+0xac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d00d      	beq.n	800420a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e008      	b.n	800421c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <prvInsertBlockIntoFreeList+0xac>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e003      	b.n	800421c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d002      	beq.n	800422a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	20001ca8 	.word	0x20001ca8
 8004238:	20001cb0 	.word	0x20001cb0

0800423c <memset>:
 800423c:	4603      	mov	r3, r0
 800423e:	4402      	add	r2, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	d100      	bne.n	8004246 <memset+0xa>
 8004244:	4770      	bx	lr
 8004246:	f803 1b01 	strb.w	r1, [r3], #1
 800424a:	e7f9      	b.n	8004240 <memset+0x4>

0800424c <_reclaim_reent>:
 800424c:	4b29      	ldr	r3, [pc, #164]	@ (80042f4 <_reclaim_reent+0xa8>)
 800424e:	b570      	push	{r4, r5, r6, lr}
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4604      	mov	r4, r0
 8004254:	4283      	cmp	r3, r0
 8004256:	d04b      	beq.n	80042f0 <_reclaim_reent+0xa4>
 8004258:	69c3      	ldr	r3, [r0, #28]
 800425a:	b1ab      	cbz	r3, 8004288 <_reclaim_reent+0x3c>
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	b16b      	cbz	r3, 800427c <_reclaim_reent+0x30>
 8004260:	2500      	movs	r5, #0
 8004262:	69e3      	ldr	r3, [r4, #28]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	5959      	ldr	r1, [r3, r5]
 8004268:	2900      	cmp	r1, #0
 800426a:	d13b      	bne.n	80042e4 <_reclaim_reent+0x98>
 800426c:	3504      	adds	r5, #4
 800426e:	2d80      	cmp	r5, #128	@ 0x80
 8004270:	d1f7      	bne.n	8004262 <_reclaim_reent+0x16>
 8004272:	69e3      	ldr	r3, [r4, #28]
 8004274:	4620      	mov	r0, r4
 8004276:	68d9      	ldr	r1, [r3, #12]
 8004278:	f000 f872 	bl	8004360 <_free_r>
 800427c:	69e3      	ldr	r3, [r4, #28]
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	b111      	cbz	r1, 8004288 <_reclaim_reent+0x3c>
 8004282:	4620      	mov	r0, r4
 8004284:	f000 f86c 	bl	8004360 <_free_r>
 8004288:	6961      	ldr	r1, [r4, #20]
 800428a:	b111      	cbz	r1, 8004292 <_reclaim_reent+0x46>
 800428c:	4620      	mov	r0, r4
 800428e:	f000 f867 	bl	8004360 <_free_r>
 8004292:	69e1      	ldr	r1, [r4, #28]
 8004294:	b111      	cbz	r1, 800429c <_reclaim_reent+0x50>
 8004296:	4620      	mov	r0, r4
 8004298:	f000 f862 	bl	8004360 <_free_r>
 800429c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800429e:	b111      	cbz	r1, 80042a6 <_reclaim_reent+0x5a>
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 f85d 	bl	8004360 <_free_r>
 80042a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042a8:	b111      	cbz	r1, 80042b0 <_reclaim_reent+0x64>
 80042aa:	4620      	mov	r0, r4
 80042ac:	f000 f858 	bl	8004360 <_free_r>
 80042b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80042b2:	b111      	cbz	r1, 80042ba <_reclaim_reent+0x6e>
 80042b4:	4620      	mov	r0, r4
 80042b6:	f000 f853 	bl	8004360 <_free_r>
 80042ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80042bc:	b111      	cbz	r1, 80042c4 <_reclaim_reent+0x78>
 80042be:	4620      	mov	r0, r4
 80042c0:	f000 f84e 	bl	8004360 <_free_r>
 80042c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80042c6:	b111      	cbz	r1, 80042ce <_reclaim_reent+0x82>
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 f849 	bl	8004360 <_free_r>
 80042ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80042d0:	b111      	cbz	r1, 80042d8 <_reclaim_reent+0x8c>
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 f844 	bl	8004360 <_free_r>
 80042d8:	6a23      	ldr	r3, [r4, #32]
 80042da:	b14b      	cbz	r3, 80042f0 <_reclaim_reent+0xa4>
 80042dc:	4620      	mov	r0, r4
 80042de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042e2:	4718      	bx	r3
 80042e4:	680e      	ldr	r6, [r1, #0]
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 f83a 	bl	8004360 <_free_r>
 80042ec:	4631      	mov	r1, r6
 80042ee:	e7bb      	b.n	8004268 <_reclaim_reent+0x1c>
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
 80042f2:	bf00      	nop
 80042f4:	20000010 	.word	0x20000010

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	2600      	movs	r6, #0
 80042fc:	4d0c      	ldr	r5, [pc, #48]	@ (8004330 <__libc_init_array+0x38>)
 80042fe:	4c0d      	ldr	r4, [pc, #52]	@ (8004334 <__libc_init_array+0x3c>)
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	f000 f87e 	bl	8004408 <_init>
 800430c:	2600      	movs	r6, #0
 800430e:	4d0a      	ldr	r5, [pc, #40]	@ (8004338 <__libc_init_array+0x40>)
 8004310:	4c0a      	ldr	r4, [pc, #40]	@ (800433c <__libc_init_array+0x44>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	080044c8 	.word	0x080044c8
 8004334:	080044c8 	.word	0x080044c8
 8004338:	080044c8 	.word	0x080044c8
 800433c:	080044cc 	.word	0x080044cc

08004340 <__retarget_lock_acquire_recursive>:
 8004340:	4770      	bx	lr

08004342 <__retarget_lock_release_recursive>:
 8004342:	4770      	bx	lr

08004344 <memcpy>:
 8004344:	440a      	add	r2, r1
 8004346:	4291      	cmp	r1, r2
 8004348:	f100 33ff 	add.w	r3, r0, #4294967295
 800434c:	d100      	bne.n	8004350 <memcpy+0xc>
 800434e:	4770      	bx	lr
 8004350:	b510      	push	{r4, lr}
 8004352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004356:	4291      	cmp	r1, r2
 8004358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800435c:	d1f9      	bne.n	8004352 <memcpy+0xe>
 800435e:	bd10      	pop	{r4, pc}

08004360 <_free_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4605      	mov	r5, r0
 8004364:	2900      	cmp	r1, #0
 8004366:	d040      	beq.n	80043ea <_free_r+0x8a>
 8004368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436c:	1f0c      	subs	r4, r1, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfb8      	it	lt
 8004372:	18e4      	addlt	r4, r4, r3
 8004374:	f000 f83c 	bl	80043f0 <__malloc_lock>
 8004378:	4a1c      	ldr	r2, [pc, #112]	@ (80043ec <_free_r+0x8c>)
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	b933      	cbnz	r3, 800438c <_free_r+0x2c>
 800437e:	6063      	str	r3, [r4, #4]
 8004380:	6014      	str	r4, [r2, #0]
 8004382:	4628      	mov	r0, r5
 8004384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004388:	f000 b838 	b.w	80043fc <__malloc_unlock>
 800438c:	42a3      	cmp	r3, r4
 800438e:	d908      	bls.n	80043a2 <_free_r+0x42>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	1821      	adds	r1, r4, r0
 8004394:	428b      	cmp	r3, r1
 8004396:	bf01      	itttt	eq
 8004398:	6819      	ldreq	r1, [r3, #0]
 800439a:	685b      	ldreq	r3, [r3, #4]
 800439c:	1809      	addeq	r1, r1, r0
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	e7ed      	b.n	800437e <_free_r+0x1e>
 80043a2:	461a      	mov	r2, r3
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b10b      	cbz	r3, 80043ac <_free_r+0x4c>
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	d9fa      	bls.n	80043a2 <_free_r+0x42>
 80043ac:	6811      	ldr	r1, [r2, #0]
 80043ae:	1850      	adds	r0, r2, r1
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d10b      	bne.n	80043cc <_free_r+0x6c>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	4401      	add	r1, r0
 80043b8:	1850      	adds	r0, r2, r1
 80043ba:	4283      	cmp	r3, r0
 80043bc:	6011      	str	r1, [r2, #0]
 80043be:	d1e0      	bne.n	8004382 <_free_r+0x22>
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4408      	add	r0, r1
 80043c6:	6010      	str	r0, [r2, #0]
 80043c8:	6053      	str	r3, [r2, #4]
 80043ca:	e7da      	b.n	8004382 <_free_r+0x22>
 80043cc:	d902      	bls.n	80043d4 <_free_r+0x74>
 80043ce:	230c      	movs	r3, #12
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	e7d6      	b.n	8004382 <_free_r+0x22>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	1821      	adds	r1, r4, r0
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf01      	itttt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	6054      	str	r4, [r2, #4]
 80043e8:	e7cb      	b.n	8004382 <_free_r+0x22>
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	20001dfc 	.word	0x20001dfc

080043f0 <__malloc_lock>:
 80043f0:	4801      	ldr	r0, [pc, #4]	@ (80043f8 <__malloc_lock+0x8>)
 80043f2:	f7ff bfa5 	b.w	8004340 <__retarget_lock_acquire_recursive>
 80043f6:	bf00      	nop
 80043f8:	20001df8 	.word	0x20001df8

080043fc <__malloc_unlock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	@ (8004404 <__malloc_unlock+0x8>)
 80043fe:	f7ff bfa0 	b.w	8004342 <__retarget_lock_release_recursive>
 8004402:	bf00      	nop
 8004404:	20001df8 	.word	0x20001df8

08004408 <_init>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr

08004414 <_fini>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	bf00      	nop
 8004418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441a:	bc08      	pop	{r3}
 800441c:	469e      	mov	lr, r3
 800441e:	4770      	bx	lr
